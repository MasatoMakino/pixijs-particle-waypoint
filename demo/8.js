"use strict";(self.webpackChunk_masatomakino_pixijs_particle_waypoint=self.webpackChunk_masatomakino_pixijs_particle_waypoint||[]).push([[8],{8157:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  o: () => (/* binding */ compileHighShaderGlProgram),\n  d: () => (/* binding */ compileHighShaderGpuProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs + 7 modules\nvar GlProgram = __webpack_require__(5196);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs + 6 modules\nvar GpuProgram = __webpack_require__(1982);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/warn.mjs\nvar warn = __webpack_require__(4796);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/addBits.mjs\n\n\n"use strict";\nfunction addBits(srcParts, parts, name) {\n  if (srcParts) {\n    for (const i in srcParts) {\n      const id = i.toLocaleLowerCase();\n      const part = parts[id];\n      if (part) {\n        let sanitisedPart = srcParts[i];\n        if (i === "header") {\n          sanitisedPart = sanitisedPart.replace(/@in\\s+[^;]+;\\s*/g, "").replace(/@out\\s+[^;]+;\\s*/g, "");\n        }\n        if (name) {\n          part.push(`//----${name}----//`);\n        }\n        part.push(sanitisedPart);\n      } else {\n        (0,warn/* warn */.Z)(`${i} placement hook does not exist in shader`);\n      }\n    }\n  }\n}\n\n\n//# sourceMappingURL=addBits.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileHooks.mjs\n\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  const parts = {};\n  const partMatches = programSrc.match(findHooksRx)?.map((hook) => hook.replace(/[{()}]/g, "")) ?? [];\n  partMatches.forEach((hook) => {\n    parts[hook] = [];\n  });\n  return parts;\n}\n\n\n//# sourceMappingURL=compileHooks.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileInputs.mjs\n\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join("\\n");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, "");\n  cleanedString = cleanedString.replace("{{in}}", `\n${finalString}\n`);\n  return cleanedString;\n}\n\n\n//# sourceMappingURL=compileInputs.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileOutputs.mjs\n\nfunction extractOutputs(fragmentSource, out) {\n  let match;\n  const regex = /@out\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction extractVariableName(value) {\n  const regex = /\\b(\\w+)\\s*:/g;\n  const match = regex.exec(value);\n  return match ? match[1] : "";\n}\nfunction stripVariable(value) {\n  const regex = /@.*?\\s+/g;\n  return value.replace(regex, "");\n}\nfunction compileOutputs(fragments, template) {\n  const results = [];\n  extractOutputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractOutputs(fragment.header, results);\n    }\n  });\n  let index = 0;\n  const mainStruct = results.sort().map((inValue) => {\n    if (inValue.indexOf("builtin") > -1) {\n      return inValue;\n    }\n    return `@location(${index++}) ${inValue}`;\n  }).join(",\\n");\n  const mainStart = results.sort().map((inValue) => `       var ${stripVariable(inValue)};`).join("\\n");\n  const mainEnd = `return VSOutput(\n                ${results.sort().map((inValue) => ` ${extractVariableName(inValue)}`).join(",\\n")});`;\n  let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, "");\n  compiledCode = compiledCode.replace("{{struct}}", `\n${mainStruct}\n`);\n  compiledCode = compiledCode.replace("{{start}}", `\n${mainStart}\n`);\n  compiledCode = compiledCode.replace("{{return}}", `\n${mainEnd}\n`);\n  return compiledCode;\n}\n\n\n//# sourceMappingURL=compileOutputs.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/injectBits.mjs\n\nfunction injectBits(templateSrc, fragmentParts) {\n  let out = templateSrc;\n  for (const i in fragmentParts) {\n    const parts = fragmentParts[i];\n    const toInject = parts.join("\\n");\n    if (toInject.length) {\n      out = out.replace(`{{${i}}}`, `//-----${i} START-----//\n${parts.join("\\n")}\n//----${i} FINISH----//`);\n    } else {\n      out = out.replace(`{{${i}}}`, "");\n    }\n  }\n  return out;\n}\n\n\n//# sourceMappingURL=injectBits.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/compileHighShader.mjs\n\n\n\n\n\n\n"use strict";\nconst cacheMap = /* @__PURE__ */ Object.create(null);\nconst bitCacheMap = /* @__PURE__ */ new Map();\nlet CACHE_UID = 0;\nfunction compileHighShader({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n  cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileHighShaderGl({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileInputsAndOutputs(template, bits) {\n  const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n  const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n  let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n  compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n  const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n  return {\n    vertex: compiledVertex,\n    fragment: compiledFragment\n  };\n}\nfunction generateCacheId(template, bits) {\n  return bits.map((highFragment) => {\n    if (!bitCacheMap.has(highFragment)) {\n      bitCacheMap.set(highFragment, CACHE_UID++);\n    }\n    return bitCacheMap.get(highFragment);\n  }).sort((a, b) => a - b).join("-") + template.vertex + template.fragment;\n}\nfunction compileBits(vertex, fragment, bits) {\n  const vertexParts = compileHooks(vertex);\n  const fragmentParts = compileHooks(fragment);\n  bits.forEach((shaderBit) => {\n    addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n    addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n  });\n  return {\n    vertex: injectBits(vertex, vertexParts),\n    fragment: injectBits(fragment, fragmentParts)\n  };\n}\n\n\n//# sourceMappingURL=compileHighShader.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/defaultProgramTemplate.mjs\n\nconst vertexGPUTemplate = (\n  /* wgsl */\n  `\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n        vUV = aUV;\n\n        {{main}}\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`\n);\nconst fragmentGPUTemplate = (\n  /* wgsl */\n  `\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        return outColor * vColor;\n      };\n`\n);\nconst vertexGlTemplate = (\n  /* glsl */\n  `\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n\n        {{start}}\n        \n        vColor = vec4(1.);\n        vUV = aUV;\n\n        {{main}}\n\n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`\n);\nconst fragmentGlTemplate = (\n  /* glsl */\n  `\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n    }\n`\n);\n\n\n//# sourceMappingURL=defaultProgramTemplate.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/globalUniformsBit.mjs\n\nconst globalUniformsBit = {\n  name: "global-uniforms-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    )\n  }\n};\nconst globalUniformsUBOBitGl = {\n  name: "global-uniforms-ubo-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    )\n  }\n};\nconst globalUniformsBitGl = {\n  name: "global-uniforms-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=globalUniformsBit.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs\n\n\n\n\n\n\n"use strict";\nfunction compileHighShaderGpuProgram({ bits, name }) {\n  const source = compileHighShader({\n    template: {\n      fragment: fragmentGPUTemplate,\n      vertex: vertexGPUTemplate\n    },\n    bits: [\n      globalUniformsBit,\n      ...bits\n    ]\n  });\n  return GpuProgram/* GpuProgram */.O.from({\n    name,\n    vertex: {\n      source: source.vertex,\n      entryPoint: "main"\n    },\n    fragment: {\n      source: source.fragment,\n      entryPoint: "main"\n    }\n  });\n}\nfunction compileHighShaderGlProgram({ bits, name }) {\n  return new GlProgram/* GlProgram */.J({\n    name,\n    ...compileHighShaderGl({\n      template: {\n        vertex: vertexGlTemplate,\n        fragment: fragmentGlTemplate\n      },\n      bits: [\n        globalUniformsBitGl,\n        ...bits\n      ]\n    })\n  });\n}\n\n\n//# sourceMappingURL=compileHighShaderToProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8157\n')},2110:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ colorBit),\n/* harmony export */   T: () => (/* binding */ colorBitGl)\n/* harmony export */ });\n\nconst colorBit = {\n  name: "color-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            @in aColor: vec4<f32>;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\nconst colorBitGl = {\n  name: "color-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            in vec4 aColor;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=colorBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjExMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvY29sb3JCaXQubWpzPzAxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb2xvckJpdCA9IHtcbiAgbmFtZTogXCJjb2xvci1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBAaW4gYUNvbG9yOiB2ZWM0PGYzMj47XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHZDb2xvciAqPSB2ZWM0PGYzMj4oYUNvbG9yLnJnYiAqIGFDb2xvci5hLCBhQ29sb3IuYSk7XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5jb25zdCBjb2xvckJpdEdsID0ge1xuICBuYW1lOiBcImNvbG9yLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGluIHZlYzQgYUNvbG9yO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB2Q29sb3IgKj0gdmVjNChhQ29sb3IucmdiICogYUNvbG9yLmEsIGFDb2xvci5hKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcblxuZXhwb3J0IHsgY29sb3JCaXQsIGNvbG9yQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbG9yQml0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2110\n')},6600:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   h: () => (/* binding */ generateTextureBatchBitGl),\n/* harmony export */   m: () => (/* binding */ generateTextureBatchBit)\n/* harmony export */ });\n\nconst textureBatchBitGpuCache = {};\nfunction generateBindingSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push("@group(1) @binding(0) var textureSource1: texture_2d<f32>;");\n    src.push("@group(1) @binding(1) var textureSampler1: sampler;");\n  } else {\n    let bindingIndex = 0;\n    for (let i = 0; i < maxTextures; i++) {\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n    }\n  }\n  return src.join("\\n");\n}\nfunction generateSampleSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push("outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);");\n  } else {\n    src.push("switch vTextureId {");\n    for (let i = 0; i < maxTextures; i++) {\n      if (i === maxTextures - 1) {\n        src.push(`  default:{`);\n      } else {\n        src.push(`  case ${i}:{`);\n      }\n      src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n      src.push(`      break;}`);\n    }\n    src.push(`}`);\n  }\n  return src.join("\\n");\n}\nfunction generateTextureBatchBit(maxTextures) {\n  if (!textureBatchBitGpuCache[maxTextures]) {\n    textureBatchBitGpuCache[maxTextures] = {\n      name: "texture-batch-bit",\n      vertex: {\n        header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                @in @interpolate(flat) vTextureId: u32;\n    \n                ${generateBindingSrc(16)}\n            `,\n        main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n    \n                ${generateSampleSrc(16)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGpuCache[maxTextures];\n}\nconst textureBatchBitGlCache = {};\nfunction generateSampleGlSrc(maxTextures) {\n  const src = [];\n  for (let i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src.push("else");\n    }\n    if (i < maxTextures - 1) {\n      src.push(`if(vTextureId < ${i}.5)`);\n    }\n    src.push("{");\n    src.push(`\toutColor = texture(uTextures[${i}], vUV);`);\n    src.push("}");\n  }\n  return src.join("\\n");\n}\nfunction generateTextureBatchBitGl(maxTextures) {\n  if (!textureBatchBitGlCache[maxTextures]) {\n    textureBatchBitGlCache[maxTextures] = {\n      name: "texture-batch-bit",\n      vertex: {\n        header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n              \n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                in float vTextureId;\n    \n                uniform sampler2D uTextures[${maxTextures}];\n              \n            `,\n        main: `\n    \n                ${generateSampleGlSrc(16)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGlCache[maxTextures];\n}\n\n\n//# sourceMappingURL=generateTextureBatchBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYwMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSxpRUFBaUU7QUFDakUsSUFBSTtBQUNKO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQyxxQ0FBcUMsZUFBZSxxQkFBcUIsTUFBTSxrQkFBa0I7QUFDakcscUNBQXFDLGVBQWUsc0JBQXNCLE1BQU0sVUFBVTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RjtBQUM3RixJQUFJO0FBQ0osaUNBQWlDO0FBQ2pDLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQSw2QkFBNkI7QUFDN0IsUUFBUTtBQUNSLDJCQUEyQixFQUFFLEVBQUU7QUFDL0I7QUFDQSxrRUFBa0UsTUFBTSxrQkFBa0IsTUFBTSxtQkFBbUI7QUFDbkgsNkJBQTZCO0FBQzdCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsRUFBRTtBQUNwQztBQUNBLGVBQWU7QUFDZiw4Q0FBOEMsRUFBRSxRQUFRO0FBQ3hELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEQ7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQubWpzP2I5M2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB0ZXh0dXJlQmF0Y2hCaXRHcHVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZ2VuZXJhdGVCaW5kaW5nU3JjKG1heFRleHR1cmVzKSB7XG4gIGNvbnN0IHNyYyA9IFtdO1xuICBpZiAobWF4VGV4dHVyZXMgPT09IDEpIHtcbiAgICBzcmMucHVzaChcIkBncm91cCgxKSBAYmluZGluZygwKSB2YXIgdGV4dHVyZVNvdXJjZTE6IHRleHR1cmVfMmQ8ZjMyPjtcIik7XG4gICAgc3JjLnB1c2goXCJAZ3JvdXAoMSkgQGJpbmRpbmcoMSkgdmFyIHRleHR1cmVTYW1wbGVyMTogc2FtcGxlcjtcIik7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGJpbmRpbmdJbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhUZXh0dXJlczsgaSsrKSB7XG4gICAgICBzcmMucHVzaChgQGdyb3VwKDEpIEBiaW5kaW5nKCR7YmluZGluZ0luZGV4Kyt9KSB2YXIgdGV4dHVyZVNvdXJjZSR7aSArIDF9OiB0ZXh0dXJlXzJkPGYzMj47YCk7XG4gICAgICBzcmMucHVzaChgQGdyb3VwKDEpIEBiaW5kaW5nKCR7YmluZGluZ0luZGV4Kyt9KSB2YXIgdGV4dHVyZVNhbXBsZXIke2kgKyAxfTogc2FtcGxlcjtgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNyYy5qb2luKFwiXFxuXCIpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVTYW1wbGVTcmMobWF4VGV4dHVyZXMpIHtcbiAgY29uc3Qgc3JjID0gW107XG4gIGlmIChtYXhUZXh0dXJlcyA9PT0gMSkge1xuICAgIHNyYy5wdXNoKFwib3V0Q29sb3IgPSB0ZXh0dXJlU2FtcGxlR3JhZCh0ZXh0dXJlU291cmNlMSwgdGV4dHVyZVNhbXBsZXIxLCB2VVYsIHV2RHgsIHV2RHkpO1wiKTtcbiAgfSBlbHNlIHtcbiAgICBzcmMucHVzaChcInN3aXRjaCB2VGV4dHVyZUlkIHtcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhUZXh0dXJlczsgaSsrKSB7XG4gICAgICBpZiAoaSA9PT0gbWF4VGV4dHVyZXMgLSAxKSB7XG4gICAgICAgIHNyYy5wdXNoKGAgIGRlZmF1bHQ6e2ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goYCAgY2FzZSAke2l9OntgKTtcbiAgICAgIH1cbiAgICAgIHNyYy5wdXNoKGAgICAgICBvdXRDb2xvciA9IHRleHR1cmVTYW1wbGVHcmFkKHRleHR1cmVTb3VyY2Uke2kgKyAxfSwgdGV4dHVyZVNhbXBsZXIke2kgKyAxfSwgdlVWLCB1dkR4LCB1dkR5KTtgKTtcbiAgICAgIHNyYy5wdXNoKGAgICAgICBicmVhazt9YCk7XG4gICAgfVxuICAgIHNyYy5wdXNoKGB9YCk7XG4gIH1cbiAgcmV0dXJuIHNyYy5qb2luKFwiXFxuXCIpO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQobWF4VGV4dHVyZXMpIHtcbiAgaWYgKCF0ZXh0dXJlQmF0Y2hCaXRHcHVDYWNoZVttYXhUZXh0dXJlc10pIHtcbiAgICB0ZXh0dXJlQmF0Y2hCaXRHcHVDYWNoZVttYXhUZXh0dXJlc10gPSB7XG4gICAgICBuYW1lOiBcInRleHR1cmUtYmF0Y2gtYml0XCIsXG4gICAgICB2ZXJ0ZXg6IHtcbiAgICAgICAgaGVhZGVyOiBgXG4gICAgICAgICAgICAgICAgQGluIGFUZXh0dXJlSWRBbmRSb3VuZDogdmVjMjx1MzI+O1xuICAgICAgICAgICAgICAgIEBvdXQgQGludGVycG9sYXRlKGZsYXQpIHZUZXh0dXJlSWQgOiB1MzI7XG4gICAgICAgICAgICBgLFxuICAgICAgICBtYWluOiBgXG4gICAgICAgICAgICAgICAgdlRleHR1cmVJZCA9IGFUZXh0dXJlSWRBbmRSb3VuZC55O1xuICAgICAgICAgICAgYCxcbiAgICAgICAgZW5kOiBgXG4gICAgICAgICAgICAgICAgaWYoYVRleHR1cmVJZEFuZFJvdW5kLnggPT0gMSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZQb3NpdGlvbiA9IHZlYzQ8ZjMyPihyb3VuZFBpeGVscyh2UG9zaXRpb24ueHksIGdsb2JhbFVuaWZvcm1zLnVSZXNvbHV0aW9uKSwgdlBvc2l0aW9uLnp3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICB9LFxuICAgICAgZnJhZ21lbnQ6IHtcbiAgICAgICAgaGVhZGVyOiBgXG4gICAgICAgICAgICAgICAgQGluIEBpbnRlcnBvbGF0ZShmbGF0KSB2VGV4dHVyZUlkOiB1MzI7XG4gICAgXG4gICAgICAgICAgICAgICAgJHtnZW5lcmF0ZUJpbmRpbmdTcmMoMTYpfVxuICAgICAgICAgICAgYCxcbiAgICAgICAgbWFpbjogYFxuICAgICAgICAgICAgICAgIHZhciB1dkR4ID0gZHBkeCh2VVYpO1xuICAgICAgICAgICAgICAgIHZhciB1dkR5ID0gZHBkeSh2VVYpO1xuICAgIFxuICAgICAgICAgICAgICAgICR7Z2VuZXJhdGVTYW1wbGVTcmMoMTYpfVxuICAgICAgICAgICAgYFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHRleHR1cmVCYXRjaEJpdEdwdUNhY2hlW21heFRleHR1cmVzXTtcbn1cbmNvbnN0IHRleHR1cmVCYXRjaEJpdEdsQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdlbmVyYXRlU2FtcGxlR2xTcmMobWF4VGV4dHVyZXMpIHtcbiAgY29uc3Qgc3JjID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4VGV4dHVyZXM7IGkrKykge1xuICAgIGlmIChpID4gMCkge1xuICAgICAgc3JjLnB1c2goXCJlbHNlXCIpO1xuICAgIH1cbiAgICBpZiAoaSA8IG1heFRleHR1cmVzIC0gMSkge1xuICAgICAgc3JjLnB1c2goYGlmKHZUZXh0dXJlSWQgPCAke2l9LjUpYCk7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwie1wiKTtcbiAgICBzcmMucHVzaChgXHRvdXRDb2xvciA9IHRleHR1cmUodVRleHR1cmVzWyR7aX1dLCB2VVYpO2ApO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgfVxuICByZXR1cm4gc3JjLmpvaW4oXCJcXG5cIik7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdEdsKG1heFRleHR1cmVzKSB7XG4gIGlmICghdGV4dHVyZUJhdGNoQml0R2xDYWNoZVttYXhUZXh0dXJlc10pIHtcbiAgICB0ZXh0dXJlQmF0Y2hCaXRHbENhY2hlW21heFRleHR1cmVzXSA9IHtcbiAgICAgIG5hbWU6IFwidGV4dHVyZS1iYXRjaC1iaXRcIixcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBoZWFkZXI6IGBcbiAgICAgICAgICAgICAgICBpbiB2ZWMyIGFUZXh0dXJlSWRBbmRSb3VuZDtcbiAgICAgICAgICAgICAgICBvdXQgZmxvYXQgdlRleHR1cmVJZDtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICBgLFxuICAgICAgICBtYWluOiBgXG4gICAgICAgICAgICAgICAgdlRleHR1cmVJZCA9IGFUZXh0dXJlSWRBbmRSb3VuZC55O1xuICAgICAgICAgICAgYCxcbiAgICAgICAgZW5kOiBgXG4gICAgICAgICAgICAgICAgaWYoYVRleHR1cmVJZEFuZFJvdW5kLnggPT0gMS4pXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbi54eSA9IHJvdW5kUGl4ZWxzKGdsX1Bvc2l0aW9uLnh5LCB1UmVzb2x1dGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgfSxcbiAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgIGhlYWRlcjogYFxuICAgICAgICAgICAgICAgIGluIGZsb2F0IHZUZXh0dXJlSWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmVzWyR7bWF4VGV4dHVyZXN9XTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICBgLFxuICAgICAgICBtYWluOiBgXG4gICAgXG4gICAgICAgICAgICAgICAgJHtnZW5lcmF0ZVNhbXBsZUdsU3JjKDE2KX1cbiAgICAgICAgICAgIGBcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiB0ZXh0dXJlQmF0Y2hCaXRHbENhY2hlW21heFRleHR1cmVzXTtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQsIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlVGV4dHVyZUJhdGNoQml0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6600\n')},8070:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $g: () => (/* binding */ localUniformBitGl),\n/* harmony export */   Kt: () => (/* binding */ localUniformBitGroup2),\n/* harmony export */   XH: () => (/* binding */ localUniformBit)\n/* harmony export */ });\n\nconst localUniformBit = {\n  name: "local-uniform-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace("group(1)", "group(2)")\n  }\n};\nconst localUniformBitGl = {\n  name: "local-uniform-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=localUniformBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA3MC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxRTtBQUNyRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9sb2NhbFVuaWZvcm1CaXQubWpzPzAwMTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBsb2NhbFVuaWZvcm1CaXQgPSB7XG4gIG5hbWU6IFwibG9jYWwtdW5pZm9ybS1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG5cbiAgICAgICAgICAgIHN0cnVjdCBMb2NhbFVuaWZvcm1zIHtcbiAgICAgICAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4Om1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVDb2xvcjp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdVJvdW5kOmYzMixcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBsb2NhbFVuaWZvcm1zIDogTG9jYWxVbmlmb3JtcztcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IGxvY2FsVW5pZm9ybXMudUNvbG9yO1xuICAgICAgICAgICAgbW9kZWxNYXRyaXggKj0gbG9jYWxVbmlmb3Jtcy51VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBlbmQ6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGlmKGxvY2FsVW5pZm9ybXMudVJvdW5kID09IDEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdlBvc2l0aW9uID0gdmVjNChyb3VuZFBpeGVscyh2UG9zaXRpb24ueHksIGdsb2JhbFVuaWZvcm1zLnVSZXNvbHV0aW9uKSwgdlBvc2l0aW9uLnp3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdyb3VwMiA9IHtcbiAgLi4ubG9jYWxVbmlmb3JtQml0LFxuICB2ZXJ0ZXg6IHtcbiAgICAuLi5sb2NhbFVuaWZvcm1CaXQudmVydGV4LFxuICAgIC8vIHJlcGxhY2UgdGhlIGdyb3VwIVxuICAgIGhlYWRlcjogbG9jYWxVbmlmb3JtQml0LnZlcnRleC5oZWFkZXIucmVwbGFjZShcImdyb3VwKDEpXCIsIFwiZ3JvdXAoMilcIilcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdsID0ge1xuICBuYW1lOiBcImxvY2FsLXVuaWZvcm0tYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuXG4gICAgICAgICAgICB1bmlmb3JtIG1hdDMgdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjNCB1Q29sb3I7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IHVSb3VuZDtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IHVDb2xvcjtcbiAgICAgICAgICAgIG1vZGVsTWF0cml4ID0gdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgZW5kOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICBpZih1Um91bmQgPT0gMS4pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24ueHkgPSByb3VuZFBpeGVscyhnbF9Qb3NpdGlvbi54eSwgdVJlc29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBsb2NhbFVuaWZvcm1CaXQsIGxvY2FsVW5pZm9ybUJpdEdsLCBsb2NhbFVuaWZvcm1CaXRHcm91cDIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsVW5pZm9ybUJpdC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8070\n')},9637:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X: () => (/* binding */ roundPixelsBitGl),\n/* harmony export */   j: () => (/* binding */ roundPixelsBit)\n/* harmony export */ });\n\nconst roundPixelsBit = {\n  name: "round-pixels-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor((position * 0.5 + 0.5) * targetSize) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\nconst roundPixelsBitGl = {\n  name: "round-pixels-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor((position * 0.5 + 0.5) * targetSize) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=roundPixelsBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzNy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzPzc5ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCByb3VuZFBpeGVsc0JpdCA9IHtcbiAgbmFtZTogXCJyb3VuZC1waXhlbHMtYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgZm4gcm91bmRQaXhlbHMocG9zaXRpb246IHZlYzI8ZjMyPiwgdGFyZ2V0U2l6ZTogdmVjMjxmMzI+KSAtPiB2ZWMyPGYzMj4gXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmbG9vcigocG9zaXRpb24gKiAwLjUgKyAwLjUpICogdGFyZ2V0U2l6ZSkgLyB0YXJnZXRTaXplKSAqIDIuMCAtIDEuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IHJvdW5kUGl4ZWxzQml0R2wgPSB7XG4gIG5hbWU6IFwicm91bmQtcGl4ZWxzLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGAgICBcbiAgICAgICAgICAgIHZlYzIgcm91bmRQaXhlbHModmVjMiBwb3NpdGlvbiwgdmVjMiB0YXJnZXRTaXplKVxuICAgICAgICAgICAgeyAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZsb29yKChwb3NpdGlvbiAqIDAuNSArIDAuNSkgKiB0YXJnZXRTaXplKSAvIHRhcmdldFNpemUpICogMi4wIC0gMS4wO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyByb3VuZFBpeGVsc0JpdCwgcm91bmRQaXhlbHNCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91bmRQaXhlbHNCaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9637\n')},5196:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  J: () => (/* binding */ GlProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/environment/adapter.mjs + 1 modules\nvar adapter = __webpack_require__(3646);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs\n\n\n"use strict";\nlet context;\nfunction getTestContext() {\n  if (!context || context?.isContextLost()) {\n    const canvas = adapter/* DOMAdapter */.z.get().createCanvas();\n    context = canvas.getContext("webgl", {});\n  }\n  return context;\n}\n\n\n//# sourceMappingURL=getTestContext.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs\n\n\n"use strict";\nlet maxFragmentPrecision;\nfunction getMaxFragmentPrecision() {\n  if (!maxFragmentPrecision) {\n    maxFragmentPrecision = "mediump";\n    const gl = getTestContext();\n    if (gl) {\n      if (gl.getShaderPrecisionFormat) {\n        const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        maxFragmentPrecision = shaderFragment.precision ? "highp" : "mediump";\n      }\n    }\n  }\n  return maxFragmentPrecision;\n}\n\n\n//# sourceMappingURL=getMaxFragmentPrecision.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs\n\nfunction addProgramDefines(src, isES300, isFragment) {\n  if (isES300)\n    return src;\n  if (isFragment) {\n    src = src.replace("out vec4 finalColor;", "");\n    return `\n        \n        #ifdef GL_ES // This checks if it\'s WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n  }\n  return `\n        \n        #ifdef GL_ES // This checks if it\'s WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n\n\n//# sourceMappingURL=addProgramDefines.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs\n\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== "precision") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === "highp" && maxSupportedPrecision !== "highp") {\n      precision = "mediump";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== "highp" && src.substring(0, 15) === "precision highp") {\n    return src.replace("precision highp", "precision mediump");\n  }\n  return src;\n}\n\n\n//# sourceMappingURL=ensurePrecision.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs\n\nfunction insertVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return `#version 300 es\n${src}`;\n}\n\n\n//# sourceMappingURL=insertVersion.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs\n\nconst fragmentNameCache = {};\nconst VertexNameCache = {};\nfunction setProgramName(src, { name = `pixi-program` }, isFragment = true) {\n  name = name.replace(/\\s+/g, "-");\n  name += isFragment ? "-fragment" : "-vertex";\n  const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n  if (nameCache[name]) {\n    nameCache[name]++;\n    name += `-${nameCache[name]}`;\n  } else {\n    nameCache[name] = 1;\n  }\n  if (src.indexOf("#define SHADER_NAME") !== -1)\n    return src;\n  const shaderName = `#define SHADER_NAME ${name}`;\n  return `${shaderName}\n${src}`;\n}\n\n\n//# sourceMappingURL=setProgramName.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs\n\nfunction stripVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return src.replace("#version 300 es", "");\n}\n\n\n//# sourceMappingURL=stripVersion.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs\n\n\n\n\n\n\n\n\n"use strict";\nconst processes = {\n  // strips any version headers..\n  stripVersion: stripVersion,\n  // adds precision string if not already present\n  ensurePrecision: ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines: addProgramDefines,\n  // add the program name to the shader\n  setProgramName: setProgramName,\n  // add the version string to the shader header\n  insertVersion: insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf("#version 300 es") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: "highp",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this._key = (0,createIdFromString/* createIdFromString */.Z)(`${this.vertex}:${this.fragment}`, "gl-program");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: "highp",\n  preferredFragmentPrecision: "mediump"\n};\nlet GlProgram = _GlProgram;\n\n\n//# sourceMappingURL=GlProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5196\n')},1982:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  O: () => (/* binding */ GpuProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs\nvar getAttributeInfoFromFormat = __webpack_require__(9824);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs\n\n\n"use strict";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: "float32",\n  "vec2<f32>": "float32x2",\n  "vec3<f32>": "float32x3",\n  "vec4<f32>": "float32x4",\n  vec2f: "float32x2",\n  vec3f: "float32x3",\n  vec4f: "float32x4",\n  i32: "sint32",\n  "vec2<i32>": "sint32x2",\n  "vec3<i32>": "sint32x3",\n  "vec4<i32>": "sint32x4",\n  u32: "uint32",\n  "vec2<u32>": "uint32x2",\n  "vec3<u32>": "uint32x3",\n  "vec4<u32>": "uint32x4",\n  bool: "uint32",\n  "vec2<bool>": "uint32x2",\n  "vec3<bool>": "uint32x3",\n  "vec4<bool>": "uint32x4"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf("->", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? "float32";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: (0,getAttributeInfoFromFormat/* getAttributeInfoFromFormat */.v)(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\n\n//# sourceMappingURL=extractAttributesFromGpuProgram.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs\n\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map((item) => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === "<uniform>",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map((struct) => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(":");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return { name, members };\n  }).filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\n\n\n//# sourceMappingURL=extractStructAndGroups.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs\n\nvar ShaderStage = /* @__PURE__ */ ((ShaderStage2) => {\n  ShaderStage2[ShaderStage2["VERTEX"] = 1] = "VERTEX";\n  ShaderStage2[ShaderStage2["FRAGMENT"] = 2] = "FRAGMENT";\n  ShaderStage2[ShaderStage2["COMPUTE"] = 4] = "COMPUTE";\n  return ShaderStage2;\n})(ShaderStage || {});\n\n\n//# sourceMappingURL=const.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs\n\n\n"use strict";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: "uniform"\n        }\n      });\n    } else if (group.type === "sampler") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: "filtering"\n        }\n      });\n    } else if (group.type === "texture_2d") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: "float",\n          viewDimension: "2d",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\n\n//# sourceMappingURL=generateGpuLayoutGroups.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs\n\nfunction generateLayoutHash({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = {};\n    }\n    layout[group.group][group.name] = group.binding;\n  }\n  return layout;\n}\n\n\n//# sourceMappingURL=generateLayoutHash.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs\n\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */ new Set();\n  const dupeGroupKeySet = /* @__PURE__ */ new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter((struct) => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter((group) => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return { structs, groups };\n}\n\n\n//# sourceMappingURL=removeStructAndGroupDuplicates.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs\n\n\n\n\n\n\n\n"use strict";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = (0,createIdFromString/* createIdFromString */.Z)(bigKey, "program");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\n\n//# sourceMappingURL=GpuProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1982\n')},9824:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   v: () => (/* binding */ getAttributeInfoFromFormat)\n/* harmony export */ });\n\nconst attributeFormatData = {\n  uint8x2: { size: 2, stride: 2, normalised: false },\n  uint8x4: { size: 4, stride: 4, normalised: false },\n  sint8x2: { size: 2, stride: 2, normalised: false },\n  sint8x4: { size: 4, stride: 4, normalised: false },\n  unorm8x2: { size: 2, stride: 2, normalised: true },\n  unorm8x4: { size: 4, stride: 4, normalised: true },\n  snorm8x2: { size: 2, stride: 2, normalised: true },\n  snorm8x4: { size: 4, stride: 4, normalised: true },\n  uint16x2: { size: 2, stride: 4, normalised: false },\n  uint16x4: { size: 4, stride: 8, normalised: false },\n  sint16x2: { size: 2, stride: 4, normalised: false },\n  sint16x4: { size: 4, stride: 8, normalised: false },\n  unorm16x2: { size: 2, stride: 4, normalised: true },\n  unorm16x4: { size: 4, stride: 8, normalised: true },\n  snorm16x2: { size: 2, stride: 4, normalised: true },\n  snorm16x4: { size: 4, stride: 8, normalised: true },\n  float16x2: { size: 2, stride: 4, normalised: false },\n  float16x4: { size: 4, stride: 8, normalised: false },\n  float32: { size: 1, stride: 4, normalised: false },\n  float32x2: { size: 2, stride: 8, normalised: false },\n  float32x3: { size: 3, stride: 12, normalised: false },\n  float32x4: { size: 4, stride: 16, normalised: false },\n  uint32: { size: 1, stride: 4, normalised: false },\n  uint32x2: { size: 2, stride: 8, normalised: false },\n  uint32x3: { size: 3, stride: 12, normalised: false },\n  uint32x4: { size: 4, stride: 16, normalised: false },\n  sint32: { size: 1, stride: 4, normalised: false },\n  sint32x2: { size: 2, stride: 8, normalised: false },\n  sint32x3: { size: 3, stride: 12, normalised: false },\n  sint32x4: { size: 4, stride: 16, normalised: false }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n\n\n//# sourceMappingURL=getAttributeInfoFromFormat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgyNC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSx1Q0FBdUM7QUFDdEQsZUFBZSx1Q0FBdUM7QUFDdEQsYUFBYSx1Q0FBdUM7QUFDcEQsZUFBZSx1Q0FBdUM7QUFDdEQsZUFBZSx3Q0FBd0M7QUFDdkQsZUFBZSx3Q0FBd0M7QUFDdkQsWUFBWSx1Q0FBdUM7QUFDbkQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx3Q0FBd0M7QUFDdEQsY0FBYyx3Q0FBd0M7QUFDdEQsWUFBWSx1Q0FBdUM7QUFDbkQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx3Q0FBd0M7QUFDdEQsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2dlb21ldHJ5L3V0aWxzL2dldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Lm1qcz8wMjkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYXR0cmlidXRlRm9ybWF0RGF0YSA9IHtcbiAgdWludDh4MjogeyBzaXplOiAyLCBzdHJpZGU6IDIsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVpbnQ4eDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50OHgyOiB7IHNpemU6IDIsIHN0cmlkZTogMiwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgc2ludDh4NDogeyBzaXplOiA0LCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVub3JtOHgyOiB7IHNpemU6IDIsIHN0cmlkZTogMiwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICB1bm9ybTh4NDogeyBzaXplOiA0LCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IHRydWUgfSxcbiAgc25vcm04eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiAyLCBub3JtYWxpc2VkOiB0cnVlIH0sXG4gIHNub3JtOHg0OiB7IHNpemU6IDQsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICB1aW50MTZ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVpbnQxNng0OiB7IHNpemU6IDQsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgc2ludDE2eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50MTZ4NDogeyBzaXplOiA0LCBzdHJpZGU6IDgsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVub3JtMTZ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IHRydWUgfSxcbiAgdW5vcm0xNng0OiB7IHNpemU6IDQsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICBzbm9ybTE2eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiB0cnVlIH0sXG4gIHNub3JtMTZ4NDogeyBzaXplOiA0LCBzdHJpZGU6IDgsIG5vcm1hbGlzZWQ6IHRydWUgfSxcbiAgZmxvYXQxNngyOiB7IHNpemU6IDIsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgZmxvYXQxNng0OiB7IHNpemU6IDQsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgZmxvYXQzMjogeyBzaXplOiAxLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIGZsb2F0MzJ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDgsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIGZsb2F0MzJ4MzogeyBzaXplOiAzLCBzdHJpZGU6IDEyLCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBmbG9hdDMyeDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiAxNiwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdWludDMyOiB7IHNpemU6IDEsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdWludDMyeDI6IHsgc2l6ZTogMiwgc3RyaWRlOiA4LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICB1aW50MzJ4MzogeyBzaXplOiAzLCBzdHJpZGU6IDEyLCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICB1aW50MzJ4NDogeyBzaXplOiA0LCBzdHJpZGU6IDE2LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50MzI6IHsgc2l6ZTogMSwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50MzJ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDgsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQzMngzOiB7IHNpemU6IDMsIHN0cmlkZTogMTIsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQzMng0OiB7IHNpemU6IDQsIHN0cmlkZTogMTYsIG5vcm1hbGlzZWQ6IGZhbHNlIH1cbn07XG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChmb3JtYXQpIHtcbiAgcmV0dXJuIGF0dHJpYnV0ZUZvcm1hdERhdGFbZm9ybWF0XSA/PyBhdHRyaWJ1dGVGb3JtYXREYXRhLmZsb2F0MzI7XG59XG5cbmV4cG9ydCB7IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9824\n")},2267:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ Shader)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4146);\n/* harmony import */ var _gl_shader_GlProgram_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5196);\n/* harmony import */ var _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9818);\n/* harmony import */ var _gpu_shader_GpuProgram_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1982);\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5765);\n/* harmony import */ var _UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3870);\n\n\n\n\n\n\n\n"use strict";\nclass Shader extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {\n  constructor(options) {\n    super();\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= _types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RendererType */ .g.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= _types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RendererType */ .g.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error("[Shader] Cannot have both resources and groups");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error("[Shader] No group map or WebGPU shader provided - consider using resources instead.");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      if (!gpuProgram) {\n        groupMap = {};\n        groups = {\n          99: new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v()\n        };\n        this._ownedBindGroups.push(groups[99]);\n        let bindTick = 0;\n        for (const i in resources) {\n          nameHash[i] = { group: 99, binding: bindTick, name: i };\n          groupMap[99] = groupMap[99] || {};\n          groupMap[99][bindTick] = i;\n          bindTick++;\n        }\n      } else {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupMap = {};\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      groups = {};\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new _UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_3__/* .UniformGroup */ .o(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit("destroy", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = _gpu_shader_GpuProgram_mjs__WEBPACK_IMPORTED_MODULE_4__/* .GpuProgram */ .O.from(gpu);\n    }\n    if (gl) {\n      glProgram = _gl_shader_GlProgram_mjs__WEBPACK_IMPORTED_MODULE_5__/* .GlProgram */ .J.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\n\n//# sourceMappingURL=Shader.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2267\n')},3870:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  o: () => (/* binding */ UniformGroup)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/data/uid.mjs\nvar uid = __webpack_require__(6258);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs\n\nfunction getDefaultUniformValue(type, size) {\n  switch (type) {\n    case "f32":\n      return 0;\n    case "vec2<f32>":\n      return new Float32Array(2 * size);\n    case "vec3<f32>":\n      return new Float32Array(3 * size);\n    case "vec4<f32>":\n      return new Float32Array(4 * size);\n    case "mat2x2<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case "mat3x3<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case "mat4x4<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\n\n//# sourceMappingURL=getDefaultUniformValue.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs\n\n\n\n\n"use strict";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /** used internally to know if a uniform group was used in the last render pass */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = (0,uid/* uid */.h)("uniform");\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    this._resourceType = "uniformGroup";\n    /** the resource id used internally by the renderer to build bind group keys */\n    this._resourceId = (0,uid/* uid */.h)("resource");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    this._dirtyId = 0;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = (0,createIdFromString/* createIdFromString */.Z)(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join("-"), "uniform-group");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\n\n//# sourceMappingURL=UniformGroup.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrQztBQUNsQzs7O0FDdERxRDtBQUNnQjtBQUNPOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQkFBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsc0JBQXNCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnREFBa0I7QUFDeEMsZ0JBQWdCLEVBQUUsR0FBRywwQkFBMEI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci91dGlscy9nZXREZWZhdWx0VW5pZm9ybVZhbHVlLm1qcz83Njc1Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci9Vbmlmb3JtR3JvdXAubWpzPzk2ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXREZWZhdWx0VW5pZm9ybVZhbHVlKHR5cGUsIHNpemUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImYzMlwiOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSBcInZlYzI8ZjMyPlwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMiAqIHNpemUpO1xuICAgIGNhc2UgXCJ2ZWMzPGYzMj5cIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDMgKiBzaXplKTtcbiAgICBjYXNlIFwidmVjNDxmMzI+XCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSg0ICogc2l6ZSk7XG4gICAgY2FzZSBcIm1hdDJ4MjxmMzI+XCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICAgIF0pO1xuICAgIGNhc2UgXCJtYXQzeDM8ZjMyPlwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxXG4gICAgICBdKTtcbiAgICBjYXNlIFwibWF0NHg0PGYzMj5cIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCB7IGdldERlZmF1bHRVbmlmb3JtVmFsdWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldERlZmF1bHRVbmlmb3JtVmFsdWUubWpzLm1hcFxuIiwiaW1wb3J0IHsgdWlkIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZGF0YS91aWQubWpzJztcbmltcG9ydCB7IGNyZWF0ZUlkRnJvbVN0cmluZyB9IGZyb20gJy4uL3V0aWxzL2NyZWF0ZUlkRnJvbVN0cmluZy5tanMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFVuaWZvcm1WYWx1ZSB9IGZyb20gJy4vdXRpbHMvZ2V0RGVmYXVsdFVuaWZvcm1WYWx1ZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9Vbmlmb3JtR3JvdXAgPSBjbGFzcyBfVW5pZm9ybUdyb3VwIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBVbmlmb3JtIGdyb3VwXG4gICAqIEBwYXJhbSB1bmlmb3JtU3RydWN0dXJlcyAtIFRoZSBzdHJ1Y3R1cmVzIG9mIHRoZSB1bmlmb3JtIGdyb3VwXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbmFsIHBhcmFtZXRlcnMgb2YgdGhpcyB1bmlmb3JtIGdyb3VwXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1bmlmb3JtU3RydWN0dXJlcywgb3B0aW9ucykge1xuICAgIC8qKiB1c2VkIGludGVybmFsbHkgdG8ga25vdyBpZiBhIHVuaWZvcm0gZ3JvdXAgd2FzIHVzZWQgaW4gdGhlIGxhc3QgcmVuZGVyIHBhc3MgKi9cbiAgICB0aGlzLl90b3VjaGVkID0gMDtcbiAgICAvKiogYSB1bmlxdWUgaWQgZm9yIHRoaXMgdW5pZm9ybSBncm91cCB1c2VkIHRocm91Z2ggdGhlIHJlbmRlcmVyICovXG4gICAgdGhpcy51aWQgPSB1aWQoXCJ1bmlmb3JtXCIpO1xuICAgIC8qKiBhIHJlc291cmNlIHR5cGUsIHVzZWQgdG8gaWRlbnRpZnkgaG93IHRvIGhhbmRsZSBpdCB3aGVuIGl0cyBpbiBhIGJpbmQgZ3JvdXAgLyBzaGFkZXIgcmVzb3VyY2UgKi9cbiAgICB0aGlzLl9yZXNvdXJjZVR5cGUgPSBcInVuaWZvcm1Hcm91cFwiO1xuICAgIC8qKiB0aGUgcmVzb3VyY2UgaWQgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSByZW5kZXJlciB0byBidWlsZCBiaW5kIGdyb3VwIGtleXMgKi9cbiAgICB0aGlzLl9yZXNvdXJjZUlkID0gdWlkKFwicmVzb3VyY2VcIik7XG4gICAgLyoqIHVzZWQgaXRvIGlkZW50aWZ5IGlmIHRoaXMgaXMgYSB1bmlmb3JtIGdyb3VwICovXG4gICAgdGhpcy5pc1VuaWZvcm1Hcm91cCA9IHRydWU7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBmbGFnIGlmIHRoaXMgVW5pZm9ybSBncm91cHMgZGF0YSBpcyBkaWZmZXJlbnQgZnJvbSB3aGF0IGl0IGhhcyBzdG9yZWQgaW4gaXRzIGJ1ZmZlciAvIG9uIHRoZSBHUFVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgdGhpcy5fZGlydHlJZCA9IDA7XG4gICAgb3B0aW9ucyA9IHsgLi4uX1VuaWZvcm1Hcm91cC5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMudW5pZm9ybVN0cnVjdHVyZXMgPSB1bmlmb3JtU3RydWN0dXJlcztcbiAgICBjb25zdCB1bmlmb3JtcyA9IHt9O1xuICAgIGZvciAoY29uc3QgaSBpbiB1bmlmb3JtU3RydWN0dXJlcykge1xuICAgICAgY29uc3QgdW5pZm9ybURhdGEgPSB1bmlmb3JtU3RydWN0dXJlc1tpXTtcbiAgICAgIHVuaWZvcm1EYXRhLm5hbWUgPSBpO1xuICAgICAgdW5pZm9ybURhdGEuc2l6ZSA9IHVuaWZvcm1EYXRhLnNpemUgPz8gMTtcbiAgICAgIHVuaWZvcm1EYXRhLnZhbHVlID8/ICh1bmlmb3JtRGF0YS52YWx1ZSA9IGdldERlZmF1bHRVbmlmb3JtVmFsdWUodW5pZm9ybURhdGEudHlwZSwgdW5pZm9ybURhdGEuc2l6ZSkpO1xuICAgICAgdW5pZm9ybXNbaV0gPSB1bmlmb3JtRGF0YS52YWx1ZTtcbiAgICB9XG4gICAgdGhpcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuICAgIHRoaXMuX2RpcnR5SWQgPSAxO1xuICAgIHRoaXMudWJvID0gb3B0aW9ucy51Ym87XG4gICAgdGhpcy5pc1N0YXRpYyA9IG9wdGlvbnMuaXNTdGF0aWM7XG4gICAgdGhpcy5fc2lnbmF0dXJlID0gY3JlYXRlSWRGcm9tU3RyaW5nKE9iamVjdC5rZXlzKHVuaWZvcm1zKS5tYXAoXG4gICAgICAoaSkgPT4gYCR7aX0tJHt1bmlmb3JtU3RydWN0dXJlc1tpXS50eXBlfWBcbiAgICApLmpvaW4oXCItXCIpLCBcInVuaWZvcm0tZ3JvdXBcIik7XG4gIH1cbiAgLyoqIENhbGwgdGhpcyBpZiB5b3Ugd2FudCB0aGUgdW5pZm9ybSBncm91cHMgZGF0YSB0byBiZSB1cGxvYWRlZCB0byB0aGUgR1BVIG9ubHkgdXNlZnVsIGlmIGBpc1N0YXRpY2AgaXMgdHJ1ZS4gKi9cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuX2RpcnR5SWQrKztcbiAgfVxufTtcbi8qKiBUaGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIHVuaWZvcm0gZ3JvdXAuICovXG5fVW5pZm9ybUdyb3VwLmRlZmF1bHRPcHRpb25zID0ge1xuICAvKiogaWYgdHJ1ZSB0aGUgVW5pZm9ybUdyb3VwIGlzIGhhbmRsZWQgYXMgYW4gVW5pZm9ybSBidWZmZXIgb2JqZWN0LiAqL1xuICB1Ym86IGZhbHNlLFxuICAvKiogaWYgdHJ1ZSwgdGhlbiB5b3UgYXJlIHJlc3BvbnNpYmxlIGZvciB3aGVuIHRoZSBkYXRhIGlzIHVwbG9hZGVkIHRvIHRoZSBHUFUgYnkgY2FsbGluZyBgdXBkYXRlKClgICovXG4gIGlzU3RhdGljOiBmYWxzZVxufTtcbmxldCBVbmlmb3JtR3JvdXAgPSBfVW5pZm9ybUdyb3VwO1xuXG5leHBvcnQgeyBVbmlmb3JtR3JvdXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuaWZvcm1Hcm91cC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3870\n')},6798:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ State)\n/* harmony export */ });\n\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  "normal-npm": 6,\n  "add-npm": 7,\n  "screen-npm": 8\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = "normal";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon\'s fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === "none") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === "front";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return "none";\n    }\n    return this.clockwiseFrontFace ? "front" : "back";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default \'normal\'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== "none";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\n\n//# sourceMappingURL=State.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc5OC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLHFCQUFxQix5QkFBeUIsVUFBVSxjQUFjLFlBQVksZ0JBQWdCLGdCQUFnQixtQkFBbUI7QUFDak07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanM/NTQ5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGJsZW5kTW9kZUlkcyA9IHtcbiAgbm9ybWFsOiAwLFxuICBhZGQ6IDEsXG4gIG11bHRpcGx5OiAyLFxuICBzY3JlZW46IDMsXG4gIG92ZXJsYXk6IDQsXG4gIGVyYXNlOiA1LFxuICBcIm5vcm1hbC1ucG1cIjogNixcbiAgXCJhZGQtbnBtXCI6IDcsXG4gIFwic2NyZWVuLW5wbVwiOiA4XG59O1xuY29uc3QgQkxFTkQgPSAwO1xuY29uc3QgT0ZGU0VUID0gMTtcbmNvbnN0IENVTExJTkcgPSAyO1xuY29uc3QgREVQVEhfVEVTVCA9IDM7XG5jb25zdCBXSU5ESU5HID0gNDtcbmNvbnN0IERFUFRIX01BU0sgPSA1O1xuY29uc3QgX1N0YXRlID0gY2xhc3MgX1N0YXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kYXRhID0gMDtcbiAgICB0aGlzLmJsZW5kTW9kZSA9IFwibm9ybWFsXCI7XG4gICAgdGhpcy5wb2x5Z29uT2Zmc2V0ID0gMDtcbiAgICB0aGlzLmJsZW5kID0gdHJ1ZTtcbiAgICB0aGlzLmRlcHRoTWFzayA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyBibGVuZGluZyBvZiB0aGUgY29tcHV0ZWQgZnJhZ21lbnQgY29sb3IgdmFsdWVzLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBnZXQgYmxlbmQoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgQkxFTkQpO1xuICB9XG4gIHNldCBibGVuZCh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IEJMRU5EKSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGF0YSBePSAxIDw8IEJMRU5EO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIGFkZGluZyBhbiBvZmZzZXQgdG8gZGVwdGggdmFsdWVzIG9mIHBvbHlnb24ncyBmcmFnbWVudHNcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGdldCBvZmZzZXRzKCkge1xuICAgIHJldHVybiAhISh0aGlzLmRhdGEgJiAxIDw8IE9GRlNFVCk7XG4gIH1cbiAgc2V0IG9mZnNldHModmFsdWUpIHtcbiAgICBpZiAoISEodGhpcy5kYXRhICYgMSA8PCBPRkZTRVQpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgT0ZGU0VUO1xuICAgIH1cbiAgfVxuICAvKiogVGhlIGN1bGxpbmcgc2V0dGluZ3MgZm9yIHRoaXMgc3RhdGUgbm9uZSAtIE5vIGN1bGxpbmcgYmFjayAtIEJhY2sgZmFjZSBjdWxsaW5nIGZyb250IC0gRnJvbnQgZmFjZSBjdWxsaW5nICovXG4gIHNldCBjdWxsTW9kZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHtcbiAgICAgIHRoaXMuY3VsbGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmN1bGxpbmcgPSB0cnVlO1xuICAgIHRoaXMuY2xvY2t3aXNlRnJvbnRGYWNlID0gdmFsdWUgPT09IFwiZnJvbnRcIjtcbiAgfVxuICBnZXQgY3VsbE1vZGUoKSB7XG4gICAgaWYgKCF0aGlzLmN1bGxpbmcpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvY2t3aXNlRnJvbnRGYWNlID8gXCJmcm9udFwiIDogXCJiYWNrXCI7XG4gIH1cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyBjdWxsaW5nIG9mIHBvbHlnb25zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IGN1bGxpbmcoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgQ1VMTElORyk7XG4gIH1cbiAgc2V0IGN1bGxpbmcodmFsdWUpIHtcbiAgICBpZiAoISEodGhpcy5kYXRhICYgMSA8PCBDVUxMSU5HKSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGF0YSBePSAxIDw8IENVTExJTkc7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgZGVwdGggY29tcGFyaXNvbnMgYW5kIHVwZGF0ZXMgdG8gdGhlIGRlcHRoIGJ1ZmZlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGdldCBkZXB0aFRlc3QoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgREVQVEhfVEVTVCk7XG4gIH1cbiAgc2V0IGRlcHRoVGVzdCh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IERFUFRIX1RFU1QpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgREVQVEhfVEVTVDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgd3JpdGluZyB0byB0aGUgZGVwdGggYnVmZmVyLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBnZXQgZGVwdGhNYXNrKCkge1xuICAgIHJldHVybiAhISh0aGlzLmRhdGEgJiAxIDw8IERFUFRIX01BU0spO1xuICB9XG4gIHNldCBkZXB0aE1hc2sodmFsdWUpIHtcbiAgICBpZiAoISEodGhpcy5kYXRhICYgMSA8PCBERVBUSF9NQVNLKSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuZGF0YSBePSAxIDw8IERFUFRIX01BU0s7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgZnJvbnQgb3IgYmFjay1mYWNpbmcgcG9seWdvbnMgY2FuIGJlIGN1bGxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGdldCBjbG9ja3dpc2VGcm9udEZhY2UoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgV0lORElORyk7XG4gIH1cbiAgc2V0IGNsb2Nrd2lzZUZyb250RmFjZSh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IFdJTkRJTkcpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgV0lORElORztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBibGVuZCBtb2RlIHRvIGJlIGFwcGxpZWQgd2hlbiB0aGlzIHN0YXRlIGlzIHNldC4gQXBwbHkgYSB2YWx1ZSBvZiBgbm9ybWFsYCB0byByZXNldCB0aGUgYmxlbmQgbW9kZS5cbiAgICogU2V0dGluZyB0aGlzIG1vZGUgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiBOT19CTEVORCB3aWxsIGF1dG9tYXRpY2FsbHkgc3dpdGNoIGJsZW5kaW5nIG9uLlxuICAgKiBAZGVmYXVsdCAnbm9ybWFsJ1xuICAgKi9cbiAgZ2V0IGJsZW5kTW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxlbmRNb2RlO1xuICB9XG4gIHNldCBibGVuZE1vZGUodmFsdWUpIHtcbiAgICB0aGlzLmJsZW5kID0gdmFsdWUgIT09IFwibm9uZVwiO1xuICAgIHRoaXMuX2JsZW5kTW9kZSA9IHZhbHVlO1xuICAgIHRoaXMuX2JsZW5kTW9kZUlkID0gYmxlbmRNb2RlSWRzW3ZhbHVlXSB8fCAwO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcG9seWdvbiBvZmZzZXQuIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB0byBhbnl0aGluZyBvdGhlciB0aGFuIDAgd2lsbCBhdXRvbWF0aWNhbGx5IGVuYWJsZSBwb2x5Z29uIG9mZnNldCBmaWxsLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBnZXQgcG9seWdvbk9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9seWdvbk9mZnNldDtcbiAgfVxuICBzZXQgcG9seWdvbk9mZnNldCh2YWx1ZSkge1xuICAgIHRoaXMub2Zmc2V0cyA9ICEhdmFsdWU7XG4gICAgdGhpcy5fcG9seWdvbk9mZnNldCA9IHZhbHVlO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgW3BpeGkuanMvY29yZTpTdGF0ZSBibGVuZE1vZGU9JHt0aGlzLmJsZW5kTW9kZX0gY2xvY2t3aXNlRnJvbnRGYWNlPSR7dGhpcy5jbG9ja3dpc2VGcm9udEZhY2V9IGN1bGxpbmc9JHt0aGlzLmN1bGxpbmd9IGRlcHRoTWFzaz0ke3RoaXMuZGVwdGhNYXNrfSBwb2x5Z29uT2Zmc2V0PSR7dGhpcy5wb2x5Z29uT2Zmc2V0fV1gO1xuICB9XG4gIC8qKlxuICAgKiBBIHF1aWNrbHkgZ2V0dGluZyBhbiBpbnN0YW5jZSBvZiBhIFN0YXRlIHRoYXQgaXMgY29uZmlndXJlZCBmb3IgMmQgcmVuZGVyaW5nLlxuICAgKiBAcmV0dXJucyBhIG5ldyBTdGF0ZSB3aXRoIHZhbHVlcyBzZXQgZm9yIDJkIHJlbmRlcmluZ1xuICAgKi9cbiAgc3RhdGljIGZvcjJkKCkge1xuICAgIGNvbnN0IHN0YXRlID0gbmV3IF9TdGF0ZSgpO1xuICAgIHN0YXRlLmRlcHRoVGVzdCA9IGZhbHNlO1xuICAgIHN0YXRlLmJsZW5kID0gdHJ1ZTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5fU3RhdGUuZGVmYXVsdDJkID0gX1N0YXRlLmZvcjJkKCk7XG5sZXQgU3RhdGUgPSBfU3RhdGU7XG5cbmV4cG9ydCB7IFN0YXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGF0ZS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6798\n')},6669:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   z: () => (/* binding */ TexturePool)\n/* harmony export */ });\n/* unused harmony export TexturePoolClass */\n/* harmony import */ var _maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4181);\n/* harmony import */ var _sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5206);\n/* harmony import */ var _Texture_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9853);\n\n\n\n\n"use strict";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new _sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_0__/* .TextureSource */ .p({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: true\n    });\n    return new _Texture_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Texture */ .x({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = (0,_maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__/* .nextPow2 */ .a9)(po2Width);\n    po2Height = (0,_maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__/* .nextPow2 */ .a9)(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\n\n//# sourceMappingURL=TexturePool.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY2OS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBQ0M7QUFDcEI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVksa0NBQWtDLGtCQUFrQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhFQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxlQUFlLDBEQUFPO0FBQ3RCO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0VBQVE7QUFDdkIsZ0JBQWdCLHdFQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlDO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlUG9vbC5tanM/Zjk3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXh0UG93MiB9IGZyb20gJy4uLy4uLy4uLy4uL21hdGhzL21pc2MvcG93Mi5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZVNvdXJjZSB9IGZyb20gJy4vc291cmNlcy9UZXh0dXJlU291cmNlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xubGV0IGNvdW50ID0gMDtcbmNsYXNzIFRleHR1cmVQb29sQ2xhc3Mge1xuICAvKipcbiAgICogQHBhcmFtIHRleHR1cmVPcHRpb25zIC0gb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIEJhc2VSZW5kZXJUZXh0dXJlIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U0NBTEVfTU9ERX0gW3RleHR1cmVPcHRpb25zLnNjYWxlTW9kZV0gLSBTZWUge0BsaW5rIFNDQUxFX01PREV9IGZvciBwb3NzaWJsZSB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0ZXh0dXJlT3B0aW9ucykge1xuICAgIHRoaXMuX3Bvb2xLZXlIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fdGV4dHVyZVBvb2wgPSB7fTtcbiAgICB0aGlzLnRleHR1cmVPcHRpb25zID0gdGV4dHVyZU9wdGlvbnMgfHwge307XG4gICAgdGhpcy5lbmFibGVGdWxsU2NyZWVuID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGV4dHVyZSB3aXRoIHBhcmFtcyB0aGF0IHdlcmUgc3BlY2lmaWVkIGluIHBvb2wgY29uc3RydWN0b3IuXG4gICAqIEBwYXJhbSBwaXhlbFdpZHRoIC0gV2lkdGggb2YgdGV4dHVyZSBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSBwaXhlbEhlaWdodCAtIEhlaWdodCBvZiB0ZXh0dXJlIGluIHBpeGVscy5cbiAgICogQHBhcmFtIGFudGlhbGlhc1xuICAgKi9cbiAgY3JlYXRlVGV4dHVyZShwaXhlbFdpZHRoLCBwaXhlbEhlaWdodCwgYW50aWFsaWFzKSB7XG4gICAgY29uc3QgdGV4dHVyZVNvdXJjZSA9IG5ldyBUZXh0dXJlU291cmNlKHtcbiAgICAgIC4uLnRoaXMudGV4dHVyZU9wdGlvbnMsXG4gICAgICB3aWR0aDogcGl4ZWxXaWR0aCxcbiAgICAgIGhlaWdodDogcGl4ZWxIZWlnaHQsXG4gICAgICByZXNvbHV0aW9uOiAxLFxuICAgICAgYW50aWFsaWFzLFxuICAgICAgYXV0b0dhcmJhZ2VDb2xsZWN0OiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogdGV4dHVyZVNvdXJjZSxcbiAgICAgIGxhYmVsOiBgdGV4dHVyZVBvb2xfJHtjb3VudCsrfWBcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIFBvd2VyLW9mLVR3byByZW5kZXIgdGV4dHVyZSBvciBmdWxsU2NyZWVuIHRleHR1cmVcbiAgICogQHBhcmFtIGZyYW1lV2lkdGggLSBUaGUgbWluaW11bSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSBmcmFtZUhlaWdodCAtIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSByZXNvbHV0aW9uIC0gVGhlIHJlc29sdXRpb24gb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gYW50aWFsaWFzXG4gICAqIEByZXR1cm5zIFRoZSBuZXcgcmVuZGVyIHRleHR1cmUuXG4gICAqL1xuICBnZXRPcHRpbWFsVGV4dHVyZShmcmFtZVdpZHRoLCBmcmFtZUhlaWdodCwgcmVzb2x1dGlvbiA9IDEsIGFudGlhbGlhcykge1xuICAgIGxldCBwbzJXaWR0aCA9IE1hdGguY2VpbChmcmFtZVdpZHRoICogcmVzb2x1dGlvbiAtIDFlLTYpO1xuICAgIGxldCBwbzJIZWlnaHQgPSBNYXRoLmNlaWwoZnJhbWVIZWlnaHQgKiByZXNvbHV0aW9uIC0gMWUtNik7XG4gICAgcG8yV2lkdGggPSBuZXh0UG93MihwbzJXaWR0aCk7XG4gICAgcG8ySGVpZ2h0ID0gbmV4dFBvdzIocG8ySGVpZ2h0KTtcbiAgICBjb25zdCBrZXkgPSAocG8yV2lkdGggPDwgMTcpICsgKHBvMkhlaWdodCA8PCAxKSArIChhbnRpYWxpYXMgPyAxIDogMCk7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlUG9vbFtrZXldKSB7XG4gICAgICB0aGlzLl90ZXh0dXJlUG9vbFtrZXldID0gW107XG4gICAgfVxuICAgIGxldCB0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZVBvb2xba2V5XS5wb3AoKTtcbiAgICBpZiAoIXRleHR1cmUpIHtcbiAgICAgIHRleHR1cmUgPSB0aGlzLmNyZWF0ZVRleHR1cmUocG8yV2lkdGgsIHBvMkhlaWdodCwgYW50aWFsaWFzKTtcbiAgICB9XG4gICAgdGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICAgIHRleHR1cmUuc291cmNlLndpZHRoID0gcG8yV2lkdGggLyByZXNvbHV0aW9uO1xuICAgIHRleHR1cmUuc291cmNlLmhlaWdodCA9IHBvMkhlaWdodCAvIHJlc29sdXRpb247XG4gICAgdGV4dHVyZS5zb3VyY2UucGl4ZWxXaWR0aCA9IHBvMldpZHRoO1xuICAgIHRleHR1cmUuc291cmNlLnBpeGVsSGVpZ2h0ID0gcG8ySGVpZ2h0O1xuICAgIHRleHR1cmUuZnJhbWUueCA9IDA7XG4gICAgdGV4dHVyZS5mcmFtZS55ID0gMDtcbiAgICB0ZXh0dXJlLmZyYW1lLndpZHRoID0gZnJhbWVXaWR0aDtcbiAgICB0ZXh0dXJlLmZyYW1lLmhlaWdodCA9IGZyYW1lSGVpZ2h0O1xuICAgIHRleHR1cmUudXBkYXRlVXZzKCk7XG4gICAgdGhpcy5fcG9vbEtleUhhc2hbdGV4dHVyZS51aWRdID0ga2V5O1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGV4dHJhIHRleHR1cmUgb2YgdGhlIHNhbWUgc2l6ZSBhcyBpbnB1dCByZW5kZXJUZXh0dXJlXG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY2hlY2sgd2hhdCBzaXplIGl0IGlzLlxuICAgKiBAcGFyYW0gYW50aWFsaWFzIC0gV2hldGhlciB0byB1c2UgYW50aWFsaWFzLlxuICAgKiBAcmV0dXJucyBBIHRleHR1cmUgdGhhdCBpcyBhIHBvd2VyIG9mIHR3b1xuICAgKi9cbiAgZ2V0U2FtZVNpemVUZXh0dXJlKHRleHR1cmUsIGFudGlhbGlhcyA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW1hbFRleHR1cmUodGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQsIHNvdXJjZS5fcmVzb2x1dGlvbiwgYW50aWFsaWFzKTtcbiAgfVxuICAvKipcbiAgICogUGxhY2UgYSByZW5kZXIgdGV4dHVyZSBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqIEBwYXJhbSByZW5kZXJUZXh0dXJlIC0gVGhlIHJlbmRlclRleHR1cmUgdG8gZnJlZVxuICAgKi9cbiAgcmV0dXJuVGV4dHVyZShyZW5kZXJUZXh0dXJlKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5fcG9vbEtleUhhc2hbcmVuZGVyVGV4dHVyZS51aWRdO1xuICAgIHRoaXMuX3RleHR1cmVQb29sW2tleV0ucHVzaChyZW5kZXJUZXh0dXJlKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBwb29sLlxuICAgKiBAcGFyYW0gZGVzdHJveVRleHR1cmVzIC0gRGVzdHJveSBhbGwgc3RvcmVkIHRleHR1cmVzLlxuICAgKi9cbiAgY2xlYXIoZGVzdHJveVRleHR1cmVzKSB7XG4gICAgZGVzdHJveVRleHR1cmVzID0gZGVzdHJveVRleHR1cmVzICE9PSBmYWxzZTtcbiAgICBpZiAoZGVzdHJveVRleHR1cmVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fdGV4dHVyZVBvb2wpIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZXMgPSB0aGlzLl90ZXh0dXJlUG9vbFtpXTtcbiAgICAgICAgaWYgKHRleHR1cmVzKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZXh0dXJlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdGV4dHVyZXNbal0uZGVzdHJveSh0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fdGV4dHVyZVBvb2wgPSB7fTtcbiAgfVxufVxuY29uc3QgVGV4dHVyZVBvb2wgPSBuZXcgVGV4dHVyZVBvb2xDbGFzcygpO1xuXG5leHBvcnQgeyBUZXh0dXJlUG9vbCwgVGV4dHVyZVBvb2xDbGFzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dHVyZVBvb2wubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6669\n')},8460:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ createIdFromString)\n/* harmony export */ });\n\nconst idCounts = /* @__PURE__ */ Object.create(null);\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createIdFromString(value, groupId) {\n  let id = idHash[value];\n  if (id === void 0) {\n    if (idCounts[groupId] === void 0) {\n      idCounts[groupId] = 1;\n    }\n    idHash[value] = id = idCounts[groupId]++;\n  }\n  return id;\n}\n\n\n//# sourceMappingURL=createIdFromString.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ2MC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC91dGlscy9jcmVhdGVJZEZyb21TdHJpbmcubWpzPzAzNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBpZENvdW50cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgaWRIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBjcmVhdGVJZEZyb21TdHJpbmcodmFsdWUsIGdyb3VwSWQpIHtcbiAgbGV0IGlkID0gaWRIYXNoW3ZhbHVlXTtcbiAgaWYgKGlkID09PSB2b2lkIDApIHtcbiAgICBpZiAoaWRDb3VudHNbZ3JvdXBJZF0gPT09IHZvaWQgMCkge1xuICAgICAgaWRDb3VudHNbZ3JvdXBJZF0gPSAxO1xuICAgIH1cbiAgICBpZEhhc2hbdmFsdWVdID0gaWQgPSBpZENvdW50c1tncm91cElkXSsrO1xuICB9XG4gIHJldHVybiBpZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSWRGcm9tU3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVJZEZyb21TdHJpbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8460\n")},5765:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ RendererType)\n/* harmony export */ });\n\nvar RendererType = /* @__PURE__ */ ((RendererType2) => {\n  RendererType2[RendererType2["WEBGL"] = 1] = "WEBGL";\n  RendererType2[RendererType2["WEBGPU"] = 2] = "WEBGPU";\n  RendererType2[RendererType2["BOTH"] = 3] = "BOTH";\n  return RendererType2;\n})(RendererType || {});\n\n\n//# sourceMappingURL=types.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc2NS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQjs7QUFFRztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvdHlwZXMubWpzPzQ0YzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVuZGVyZXJUeXBlID0gLyogQF9fUFVSRV9fICovICgoUmVuZGVyZXJUeXBlMikgPT4ge1xuICBSZW5kZXJlclR5cGUyW1JlbmRlcmVyVHlwZTJbXCJXRUJHTFwiXSA9IDFdID0gXCJXRUJHTFwiO1xuICBSZW5kZXJlclR5cGUyW1JlbmRlcmVyVHlwZTJbXCJXRUJHUFVcIl0gPSAyXSA9IFwiV0VCR1BVXCI7XG4gIFJlbmRlcmVyVHlwZTJbUmVuZGVyZXJUeXBlMltcIkJPVEhcIl0gPSAzXSA9IFwiQk9USFwiO1xuICByZXR1cm4gUmVuZGVyZXJUeXBlMjtcbn0pKFJlbmRlcmVyVHlwZSB8fCB7fSk7XG5cbmV4cG9ydCB7IFJlbmRlcmVyVHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5765\n')},9989:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ color32BitToUniform)\n/* harmony export */ });\n/* unused harmony export colorToUniform */\n\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\n\n//# sourceMappingURL=colorToUniform.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk4OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0M7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9ncmFwaGljcy9ncHUvY29sb3JUb1VuaWZvcm0ubWpzPzgxMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjb2xvclRvVW5pZm9ybShyZ2IsIGFscGhhLCBvdXQsIG9mZnNldCkge1xuICBvdXRbb2Zmc2V0KytdID0gKHJnYiA+PiAxNiAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiID4+IDggJiAyNTUpIC8gMjU1O1xuICBvdXRbb2Zmc2V0KytdID0gKHJnYiAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSBhbHBoYTtcbn1cbmZ1bmN0aW9uIGNvbG9yMzJCaXRUb1VuaWZvcm0oYWJnciwgb3V0LCBvZmZzZXQpIHtcbiAgY29uc3QgYWxwaGEgPSAoYWJnciA+PiAyNCAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAoYWJnciAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyID4+IDggJiAyNTUpIC8gMjU1ICogYWxwaGE7XG4gIG91dFtvZmZzZXQrK10gPSAoYWJnciA+PiAxNiAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IGFscGhhO1xufVxuXG5leHBvcnQgeyBjb2xvcjMyQml0VG9Vbmlmb3JtLCBjb2xvclRvVW5pZm9ybSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JUb1VuaWZvcm0ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9989\n")},900:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ BatchableSprite)\n/* harmony export */ });\n\nclass BatchableSprite {\n  constructor() {\n    // batch specific..\n    this.vertexSize = 4;\n    this.indexSize = 6;\n    this.location = 0;\n    // location in the buffer\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const sprite = this.renderable;\n    const texture = this.texture;\n    const wt = sprite.groupTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = this.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = sprite.groupColorAlpha;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n    this.bounds = null;\n  }\n}\n\n\n//# sourceMappingURL=BatchableSprite.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtcGFydGljbGUtd2F5cG9pbnQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlL0JhdGNoYWJsZVNwcml0ZS5tanM/ODVmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEJhdGNoYWJsZVNwcml0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIGJhdGNoIHNwZWNpZmljLi5cbiAgICB0aGlzLnZlcnRleFNpemUgPSA0O1xuICAgIHRoaXMuaW5kZXhTaXplID0gNjtcbiAgICB0aGlzLmxvY2F0aW9uID0gMDtcbiAgICAvLyBsb2NhdGlvbiBpbiB0aGUgYnVmZmVyXG4gICAgdGhpcy5iYXRjaGVyID0gbnVsbDtcbiAgICB0aGlzLmJhdGNoID0gbnVsbDtcbiAgICB0aGlzLnJvdW5kUGl4ZWxzID0gMDtcbiAgfVxuICBnZXQgYmxlbmRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBCbGVuZE1vZGU7XG4gIH1cbiAgcGFja0F0dHJpYnV0ZXMoZmxvYXQzMlZpZXcsIHVpbnQzMlZpZXcsIGluZGV4LCB0ZXh0dXJlSWQpIHtcbiAgICBjb25zdCBzcHJpdGUgPSB0aGlzLnJlbmRlcmFibGU7XG4gICAgY29uc3QgdGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICBjb25zdCB3dCA9IHNwcml0ZS5ncm91cFRyYW5zZm9ybTtcbiAgICBjb25zdCBhID0gd3QuYTtcbiAgICBjb25zdCBiID0gd3QuYjtcbiAgICBjb25zdCBjID0gd3QuYztcbiAgICBjb25zdCBkID0gd3QuZDtcbiAgICBjb25zdCB0eCA9IHd0LnR4O1xuICAgIGNvbnN0IHR5ID0gd3QudHk7XG4gICAgY29uc3QgYm91bmRzID0gdGhpcy5ib3VuZHM7XG4gICAgY29uc3QgdzAgPSBib3VuZHMubWF4WDtcbiAgICBjb25zdCB3MSA9IGJvdW5kcy5taW5YO1xuICAgIGNvbnN0IGgwID0gYm91bmRzLm1heFk7XG4gICAgY29uc3QgaDEgPSBib3VuZHMubWluWTtcbiAgICBjb25zdCB1dnMgPSB0ZXh0dXJlLnV2cztcbiAgICBjb25zdCBhcmdiID0gc3ByaXRlLmdyb3VwQ29sb3JBbHBoYTtcbiAgICBjb25zdCB0ZXh0dXJlSWRBbmRSb3VuZCA9IHRleHR1cmVJZCA8PCAxNiB8IHRoaXMucm91bmRQaXhlbHMgJiA2NTUzNTtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDBdID0gYSAqIHcxICsgYyAqIGgxICsgdHg7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxXSA9IGQgKiBoMSArIGIgKiB3MSArIHR5O1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMl0gPSB1dnMueDA7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAzXSA9IHV2cy55MDtcbiAgICB1aW50MzJWaWV3W2luZGV4ICsgNF0gPSBhcmdiO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyA1XSA9IHRleHR1cmVJZEFuZFJvdW5kO1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgNl0gPSBhICogdzAgKyBjICogaDEgKyB0eDtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDddID0gZCAqIGgxICsgYiAqIHcwICsgdHk7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyA4XSA9IHV2cy54MTtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDldID0gdXZzLnkxO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyAxMF0gPSBhcmdiO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyAxMV0gPSB0ZXh0dXJlSWRBbmRSb3VuZDtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDEyXSA9IGEgKiB3MCArIGMgKiBoMCArIHR4O1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMTNdID0gZCAqIGgwICsgYiAqIHcwICsgdHk7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxNF0gPSB1dnMueDI7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxNV0gPSB1dnMueTI7XG4gICAgdWludDMyVmlld1tpbmRleCArIDE2XSA9IGFyZ2I7XG4gICAgdWludDMyVmlld1tpbmRleCArIDE3XSA9IHRleHR1cmVJZEFuZFJvdW5kO1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMThdID0gYSAqIHcxICsgYyAqIGgwICsgdHg7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxOV0gPSBkICogaDAgKyBiICogdzEgKyB0eTtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDIwXSA9IHV2cy54MztcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDIxXSA9IHV2cy55MztcbiAgICB1aW50MzJWaWV3W2luZGV4ICsgMjJdID0gYXJnYjtcbiAgICB1aW50MzJWaWV3W2luZGV4ICsgMjNdID0gdGV4dHVyZUlkQW5kUm91bmQ7XG4gIH1cbiAgcGFja0luZGV4KGluZGV4QnVmZmVyLCBpbmRleCwgaW5kaWNlc09mZnNldCkge1xuICAgIGluZGV4QnVmZmVyW2luZGV4XSA9IGluZGljZXNPZmZzZXQgKyAwO1xuICAgIGluZGV4QnVmZmVyW2luZGV4ICsgMV0gPSBpbmRpY2VzT2Zmc2V0ICsgMTtcbiAgICBpbmRleEJ1ZmZlcltpbmRleCArIDJdID0gaW5kaWNlc09mZnNldCArIDI7XG4gICAgaW5kZXhCdWZmZXJbaW5kZXggKyAzXSA9IGluZGljZXNPZmZzZXQgKyAwO1xuICAgIGluZGV4QnVmZmVyW2luZGV4ICsgNF0gPSBpbmRpY2VzT2Zmc2V0ICsgMjtcbiAgICBpbmRleEJ1ZmZlcltpbmRleCArIDVdID0gaW5kaWNlc09mZnNldCArIDM7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gbnVsbDtcbiAgICB0aGlzLnRleHR1cmUgPSBudWxsO1xuICAgIHRoaXMuYmF0Y2hlciA9IG51bGw7XG4gICAgdGhpcy5iYXRjaCA9IG51bGw7XG4gICAgdGhpcy5ib3VuZHMgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhdGNoYWJsZVNwcml0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hhYmxlU3ByaXRlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///900\n")}}]);