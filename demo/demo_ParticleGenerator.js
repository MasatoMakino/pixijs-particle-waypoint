(()=>{var __webpack_modules__={654:()=>{},333:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/index.js + 14 modules\nvar esm = __webpack_require__(754);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 354 modules\nvar lib = __webpack_require__(647);\n;// CONCATENATED MODULE: ./esm/PixiParticle.js\n\n\nclass PixiParticle extends esm/* Particle */.hp {\n  constructor() {\n    super(...arguments);\n    this.r = 0.0;\n    //媒介変数tに応じた回転量\n    this.rotationSpeedSin = 0.0;\n    this.rotationSpeedCos = 0.0;\n    //初期回転量\n    this.rotationSin = 0.0;\n    this.rotationCos = 0.0;\n  }\n  get bitmap() {\n    return this._bitmap;\n  }\n  init(parent, bitmapURL, rangeR, rangeRotationSpeed, blendMode) {\n    this.parent = parent;\n    const texture = lib/* Texture */.xEZ.from(bitmapURL);\n    this._bitmap = new lib/* Sprite */.jyi(texture);\n    this._bitmap.anchor.set(0.5, 0.5);\n    this._bitmap.blendMode = blendMode;\n    this.parent.addChild(this._bitmap);\n    this.r = rangeR * Math.random();\n    this.rotationSpeedSin = rangeRotationSpeed * (Math.random() * 2 - 1);\n    this.rotationSpeedCos = rangeRotationSpeed * (Math.random() * 2 - 1);\n    this.rotationSin = Math.random() * 2 * Math.PI;\n    this.rotationCos = Math.random() * 2 * Math.PI;\n  }\n  update(t) {\n    const n = super.update(t);\n    const pos = this.path.getPoint(n);\n    this._bitmap.x = pos[0];\n    this._bitmap.y = pos[1];\n    if (this.r > 0.0) {\n      const sin = this.rotationSpeedSin * t + this.rotationSin;\n      const cos = this.rotationSpeedCos * t + this.rotationCos;\n      this._bitmap.x += Math.cos(cos) * this.r;\n      this._bitmap.y += Math.sin(sin) * this.r;\n    }\n    return n;\n  }\n  dispose() {\n    super.dispose();\n    if (this.parent && this._bitmap.parent) {\n      this._bitmap.parent.removeChild(this._bitmap);\n    }\n    this.parent = null;\n    this._bitmap = null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/PixiParticleGenerator.js\n\n\n\nclass PixiParticleGenerator extends esm/* ParticleGenerator */.F8 {\n  constructor(parent, path, map, option) {\n    super(path, option);\n    this.mapCounter = 0;\n    this.parent = parent;\n    this._rangeR = option?.rangeR ?? 0;\n    this._rangeRotationSpeed = option?.rangeRotationSpeed ?? 0;\n    this._blendMode = option?.blendMode ?? lib/* BLEND_MODES */.T$b.NORMAL;\n    if (Array.isArray(map)) {\n      if (map.length === 0) {\n        console.warn("PixiParticleGenerator : オプションとして渡されたテクスチャ配列が空です。このクラスは動作しますが、一切の表示を行いません。");\n        console.trace();\n      }\n      this.map = map;\n    } else {\n      this.map = [map];\n    }\n  }\n  generateParticle(path) {\n    const particle = new PixiParticle(path);\n    particle.init(this.parent, this.map[this.mapCounter], this._rangeR, this._rangeRotationSpeed, this._blendMode);\n    this.mapCounter = (this.mapCounter += 1) % this.map.length;\n    return particle;\n  }\n  generateAll() {\n    this.mapCounter = 0;\n    super.generateAll();\n  }\n  get rangeRotationSpeed() {\n    return this._rangeRotationSpeed;\n  }\n  set rangeRotationSpeed(value) {\n    this._rangeRotationSpeed = value;\n  }\n  get rangeR() {\n    return this._rangeR;\n  }\n  set rangeR(value) {\n    this._rangeR = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/PixiParticleWay.js\n\n\nclass PixiParticleWay extends esm/* ParticleWay */.mG {\n  constructor(points, option) {\n    super(points);\n    this.passageColor = 0xff0000;\n    this.passageAlpha = 0.25;\n    if (!option) return;\n    this.passageColor = option?.passageColor ?? this.passageColor;\n    this.passageAlpha = option?.passageAlpha ?? this.passageAlpha;\n    if (option?.parent) {\n      this.initPassage(option.parent);\n    }\n  }\n  initPassage(parent) {\n    if (this.passage) return;\n    this.passage = new lib/* Graphics */.TCu();\n    this.passage.visible = false;\n    parent.addChild(this.passage);\n    this.drawPassage();\n  }\n  drawPassage() {\n    if (!this.passage) return;\n    if (!this.points) return;\n    if (this.points.length <= 1) return;\n    const isBezier = this.points[1].length === 6;\n    const g = this.passage;\n    g.clear().lineStyle(1, this.passageColor, this.passageAlpha);\n    this.points.forEach((p, index) => {\n      if (index === 0) {\n        g.moveTo(p[0], p[1]);\n        return;\n      }\n      if (!isBezier) {\n        g.lineTo(p[0], p[1]);\n        return;\n      }\n      g.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n    });\n    g.endFill();\n  }\n  onSetPoints() {\n    super.onSetPoints();\n    this.drawPassage();\n  }\n  showPassage() {\n    if (!this.passage) return;\n    this.passage.visible = true;\n  }\n  hidePassage() {\n    if (!this.passage) return;\n    this.passage.visible = false;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/SamplePath.js\nconst getHeartPath = () => {\n  return [[199.999692558296, 139.037809861326], [199.999692558296, 139.037809861326, 216.517501342052, 91.0703552349714, 260.408864739813, 101.478048251449], [304.306569058069, 111.887435228376, 302.040473463538, 149.898168782486, 297.969050788655, 167.089794944798], [293.891253219557, 184.314831799952, 266.291989537884, 213.247676318414, 241.405592420215, 229.538070494226], [216.517501342052, 245.828464670041, 201.360366325658, 263.475297677716, 199.999692558296, 269.360116287618], [198.644947652665, 263.475297677716, 183.481883774538, 245.828464670041, 158.595486656873, 229.538070494226], [133.70739557871, 213.247676318414, 106.111932139903, 184.314831799952, 102.030334327938, 167.089794944798], [97.9589002789453, 149.898168782486, 95.6966160382817, 111.887435228376, 139.592214337275, 101.478048251449], [183.481883774538, 91.0703552349714, 199.999692558296, 139.037809861326, 199.999692558296, 139.037809861326]];\n};\nconst getCircle = () => {\n  const X = 200;\n  const Y = 200;\n  const K = 4 * (Math.sqrt(2) - 1) / 3;\n  const R = 100;\n  const RK = R * K;\n  return [[R + X, 0 + Y], [R + X, RK + Y, RK + X, R + Y, 0 + X, R + Y], [-RK + X, R + Y, -R + X, RK + Y, -R + X, 0 + Y], [-R + X, -RK + Y, -RK + X, -R + Y, 0 + X, -R + Y], [RK + X, -R + Y, R + X, -RK + Y, R + X, 0 + Y]];\n};\nconst getTriangle = () => {\n  return [[200, 100], [300, 273.205080756887], [100, 273.205080756887], [200, 100]];\n};\n;// CONCATENATED MODULE: ./demoSrc/common.js\n\n\n\n\n/**\n * ParticleWayを初期化する。\n * @return {ParticleWay}\n */\nfunction initWay(stage) {\n  const points = getHeartPath();\n  const wayPoint = new PixiParticleWay(esm/* BezierUtil */.jP.subdivide(points), {\n    parent: stage\n  });\n  return wayPoint;\n}\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(332);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n;// CONCATENATED MODULE: ./demoSrc/demo_ParticleGenerator.js\n\n\n\n\n\n\n\n\n/**\n * DOMContentLoaded後の初期化処理。\n * デモに必要なパーツを一式初期化する。\n */\nconst onDomContentsLoaded = () => {\n  const app = new lib/* Application */.MxU({\n    width: 640,\n    height: 480\n  });\n  document.body.appendChild(app.view);\n  const way = initWay(app.stage);\n  const generator = initGenerator(way, app.stage);\n  initGUI(generator);\n};\n\n/**\n * パーティクル生成機を初期化する。\n * @param way\n * @param stage\n * @return {PixiParticleGenerator}\n */\nconst initGenerator = (way, stage) => {\n  const bitmap = [];\n  for (let i = 0; i < 12; i++) {\n    bitmap.push(`./circle${(i + 1).toString().padStart(2, "0")}.png`);\n  }\n  const generator = new PixiParticleGenerator(stage, way, bitmap, {\n    ease: tween_esm/* default.Easing */.ZP.Easing.Cubic.InOut,\n    blendMode: lib/* BLEND_MODES */.T$b.ADD\n  });\n  generator.animator.setSpeed(166, 8 * 6);\n  generator.play();\n  return generator;\n};\n\n/**\n * デモのパラメーターを操作するGUIを初期化する。\n * @param generator\n */\nconst initGUI = generator => {\n  const prop = {\n    isPlay: true,\n    path: "heart",\n    ease: "cubicInOut",\n    valve: true,\n    mode: "sequential",\n    visiblePassage: false,\n    clear: () => {\n      generator.particleContainer.removeAll();\n    }\n  };\n  const gui = new lil_gui_esm/* default */.ZP();\n  const animator = generator.animator;\n  gui.add(animator, "generationInterval", 1, 1000);\n  gui.add(animator, "speedPerSec", 0.0001, 0.5);\n  gui.add(generator, "rangeR", 0.0, 32.0, 0.1);\n  gui.add(generator, "rangeRotationSpeed", 0.0, 3.14 * 4, 0.01);\n  gui.add(prop, "ease", ["cubicOut", "cubicInOut", "liner"]).onChange(() => {\n    let ease = null;\n    switch (prop.ease) {\n      case "cubicOut":\n        ease = tween_esm/* default.Easing */.ZP.Easing.Cubic.Out;\n        break;\n      case "cubicInOut":\n        ease = tween_esm/* default.Easing */.ZP.Easing.Cubic.InOut;\n        break;\n    }\n    animator.updateEase(ease, generator.isLoop);\n  });\n  gui.add(prop, "path", ["heart", "circle", "triangle"]).onChange(() => {\n    let path;\n    switch (prop.path) {\n      case "heart":\n        path = esm/* BezierUtil */.jP.subdivide(getHeartPath());\n        break;\n      case "circle":\n        path = esm/* BezierUtil */.jP.subdivide(getCircle());\n        break;\n      case "triangle":\n        path = getTriangle();\n        break;\n    }\n    generator.path[0].points = path;\n  });\n  gui.add(prop, "isPlay").onChange(() => {\n    if (prop.isPlay) {\n      generator.play();\n    } else {\n      generator.stop();\n    }\n  });\n  const modeManager = generator.modeManager;\n  gui.add(modeManager, "mode", ["sequential", "loop"]);\n  gui.add(prop, "valve").onChange(() => {\n    const valve = generator.valve;\n    if (prop.valve) {\n      valve.open();\n    } else {\n      valve.close();\n    }\n  });\n  gui.add(prop, "visiblePassage").onChange(() => {\n    const ways = generator.multipleWays.ways;\n    if (prop.visiblePassage) {\n      ways[0].showPassage();\n    } else {\n      ways[0].hidePassage();\n    }\n  });\n  gui.add(prop, "clear");\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///333\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],s=!0,g=0;g<U.length;g++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(s=!1,B<I&&(I=B));if(s){deferred.splice(C--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=365,(()=>{var Q={365:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[s,g,n]=F,C=0;if(s.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(n)var i=n(__webpack_require__)}for(U&&U(F);C<s.length;C++)I=s[C],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(i)},F=self.webpackChunk_masatomakino_pixijs_particle_waypoint=self.webpackChunk_masatomakino_pixijs_particle_waypoint||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(333)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();