(()=>{"use strict";var __webpack_modules__={6333:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/index.js + 13 modules\nvar esm = __webpack_require__(2768);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 34 modules\nvar lib = __webpack_require__(3974);\n;// CONCATENATED MODULE: ./esm/PixiParticle.js\n\n\nclass PixiParticle extends esm/* Particle */.hp {\n  constructor() {\n    super(...arguments);\n    this.r = 0.0;\n    //媒介変数tに応じた回転量\n    this.rotationSpeedSin = 0.0;\n    this.rotationSpeedCos = 0.0;\n    //初期回転量\n    this.rotationSin = 0.0;\n    this.rotationCos = 0.0;\n  }\n  get bitmap() {\n    return this._bitmap;\n  }\n  init(parent, bitmapURL, rangeR, rangeRotationSpeed, blendMode) {\n    this.parent = parent;\n    this._bitmap = lib/* Sprite */.jyi.from(bitmapURL);\n    this._bitmap.anchor.set(0.5, 0.5);\n    this._bitmap.blendMode = blendMode;\n    this.parent.addChild(this._bitmap);\n    this.r = rangeR * Math.random();\n    this.rotationSpeedSin = rangeRotationSpeed * (Math.random() * 2 - 1);\n    this.rotationSpeedCos = rangeRotationSpeed * (Math.random() * 2 - 1);\n    this.rotationSin = Math.random() * 2 * Math.PI;\n    this.rotationCos = Math.random() * 2 * Math.PI;\n  }\n  update(t) {\n    const n = super.update(t);\n    const pos = this.path.getPoint(n);\n    this._bitmap.x = pos[0];\n    this._bitmap.y = pos[1];\n    if (this.r > 0.0) {\n      const sin = this.rotationSpeedSin * t + this.rotationSin;\n      const cos = this.rotationSpeedCos * t + this.rotationCos;\n      this._bitmap.x += Math.cos(cos) * this.r;\n      this._bitmap.y += Math.sin(sin) * this.r;\n    }\n    return n;\n  }\n  dispose() {\n    super.dispose();\n    if (this.parent && this._bitmap.parent) {\n      this._bitmap.parent.removeChild(this._bitmap);\n    }\n    this.parent = null;\n    this._bitmap = null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/PixiParticleGenerator.js\n\n\n\nclass PixiParticleGenerator extends esm/* ParticleGenerator */.F8 {\n  constructor(parent, path, map, option) {\n    super(path, option);\n    this.mapCounter = 0;\n    this.parent = parent;\n    this._rangeR = option?.rangeR ?? 0;\n    this._rangeRotationSpeed = option?.rangeRotationSpeed ?? 0;\n    this._blendMode = option?.blendMode ?? "normal";\n    if (Array.isArray(map)) {\n      if (map.length === 0) {\n        console.warn("PixiParticleGenerator : オプションとして渡されたテクスチャ配列が空です。このクラスは動作しますが、一切の表示を行いません。");\n        console.trace();\n      }\n      this.map = map;\n    } else {\n      this.map = [map];\n    }\n  }\n  async initAssets() {\n    await lib/* Assets */.deM.load(this.map);\n  }\n  generateParticle(path) {\n    const particle = new PixiParticle(path);\n    particle.init(this.parent, this.map[this.mapCounter], this._rangeR, this._rangeRotationSpeed, this._blendMode);\n    this.mapCounter = (this.mapCounter += 1) % this.map.length;\n    return particle;\n  }\n  generateAll() {\n    this.mapCounter = 0;\n    super.generateAll();\n  }\n  get rangeRotationSpeed() {\n    return this._rangeRotationSpeed;\n  }\n  set rangeRotationSpeed(value) {\n    this._rangeRotationSpeed = value;\n  }\n  get rangeR() {\n    return this._rangeR;\n  }\n  set rangeR(value) {\n    this._rangeR = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/PixiParticleWay.js\n\n\nclass PixiParticleWay extends esm/* ParticleWay */.mG {\n  constructor(points, option) {\n    super(points);\n    this.passageColor = 0xff0000;\n    this.passageAlpha = 0.25;\n    if (!option) return;\n    this.passageColor = option?.passageColor ?? this.passageColor;\n    this.passageAlpha = option?.passageAlpha ?? this.passageAlpha;\n    if (option?.parent) {\n      this.initPassage(option.parent);\n    }\n  }\n  initPassage(parent) {\n    if (this.passage) return;\n    this.passage = new lib/* Graphics */.TCu();\n    this.passage.visible = false;\n    parent.addChild(this.passage);\n    this.drawPassage();\n  }\n  drawPassage() {\n    if (!this.passage) return;\n    if (!this.points) return;\n    if (this.points.length <= 1) return;\n    const isBezier = this.points[1].length === 6;\n    const g = this.passage;\n    g.clear();\n    this.points.forEach((p, index) => {\n      if (index === 0) {\n        g.moveTo(p[0], p[1]);\n        return;\n      }\n      if (!isBezier) {\n        g.lineTo(p[0], p[1]);\n        return;\n      }\n      g.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);\n    });\n    g.stroke({\n      width: 1,\n      color: this.passageColor,\n      alpha: this.passageAlpha\n    });\n  }\n  onSetPoints() {\n    super.onSetPoints();\n    this.drawPassage();\n  }\n  showPassage() {\n    if (!this.passage) return;\n    this.passage.visible = true;\n  }\n  hidePassage() {\n    if (!this.passage) return;\n    this.passage.visible = false;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/SamplePath.js\nconst getHeartPath = () => {\n  return [[199.999692558296, 139.037809861326], [199.999692558296, 139.037809861326, 216.517501342052, 91.0703552349714, 260.408864739813, 101.478048251449], [304.306569058069, 111.887435228376, 302.040473463538, 149.898168782486, 297.969050788655, 167.089794944798], [293.891253219557, 184.314831799952, 266.291989537884, 213.247676318414, 241.405592420215, 229.538070494226], [216.517501342052, 245.828464670041, 201.360366325658, 263.475297677716, 199.999692558296, 269.360116287618], [198.644947652665, 263.475297677716, 183.481883774538, 245.828464670041, 158.595486656873, 229.538070494226], [133.70739557871, 213.247676318414, 106.111932139903, 184.314831799952, 102.030334327938, 167.089794944798], [97.9589002789453, 149.898168782486, 95.6966160382817, 111.887435228376, 139.592214337275, 101.478048251449], [183.481883774538, 91.0703552349714, 199.999692558296, 139.037809861326, 199.999692558296, 139.037809861326]];\n};\nconst getCircle = () => {\n  const X = 200;\n  const Y = 200;\n  const K = 4 * (Math.sqrt(2) - 1) / 3;\n  const R = 100;\n  const RK = R * K;\n  return [[R + X, 0 + Y], [R + X, RK + Y, RK + X, R + Y, 0 + X, R + Y], [-RK + X, R + Y, -R + X, RK + Y, -R + X, 0 + Y], [-R + X, -RK + Y, -RK + X, -R + Y, 0 + X, -R + Y], [RK + X, -R + Y, R + X, -RK + Y, R + X, 0 + Y]];\n};\nconst getTriangle = () => {\n  return [[200, 100], [300, 273.205080756887], [100, 273.205080756887], [200, 100]];\n};\n;// CONCATENATED MODULE: ./demoSrc/common.js\n\n\n\n\n/**\n * ParticleWayを初期化する。\n * @return {ParticleWay}\n */\nfunction initWay(stage) {\n  const points = getHeartPath();\n  const wayPoint = new PixiParticleWay(esm/* BezierUtil */.jP.subdivide(points), {\n    parent: stage\n  });\n  return wayPoint;\n}\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(7429);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(1984);\n;// CONCATENATED MODULE: ./demoSrc/demo_ParticleGenerator.js\n\n\n\n\n\n\n\n\n/**\n * DOMContentLoaded後の初期化処理。\n * デモに必要なパーツを一式初期化する。\n */\nconst onDomContentsLoaded = async () => {\n  const app = new lib/* Application */.MxU();\n  await app.init({\n    width: 640,\n    height: 480\n  });\n  document.body.appendChild(app.canvas);\n  const way = initWay(app.stage);\n  const generator = initGenerator(way, app.stage);\n  await generator.initAssets();\n  generator.play();\n  initGUI(generator);\n};\n\n/**\n * パーティクル生成機を初期化する。\n * @param way\n * @param stage\n * @return {PixiParticleGenerator}\n */\nconst initGenerator = (way, stage) => {\n  const bitmap = [];\n  for (let i = 0; i < 12; i++) {\n    bitmap.push(`./circle${(i + 1).toString().padStart(2, "0")}.png`);\n  }\n  const generator = new PixiParticleGenerator(stage, way, bitmap, {\n    ease: tween_esm/* default.Easing */.ZP.Easing.Cubic.InOut,\n    blendMode: "add"\n  });\n  generator.animator.setSpeed(166, 8 * 6);\n  return generator;\n};\n\n/**\n * デモのパラメーターを操作するGUIを初期化する。\n * @param generator\n */\nconst initGUI = generator => {\n  const prop = {\n    isPlay: true,\n    path: "heart",\n    ease: "cubicInOut",\n    valve: true,\n    mode: "sequential",\n    visiblePassage: false,\n    clear: () => {\n      generator.particleContainer.removeAll();\n    }\n  };\n  const gui = new lil_gui_esm/* default */.ZP();\n  const animator = generator.animator;\n  gui.add(animator, "generationInterval", 1, 1000);\n  gui.add(animator, "speedPerSec", 0.0001, 0.5);\n  gui.add(generator, "rangeR", 0.0, 32.0, 0.1);\n  gui.add(generator, "rangeRotationSpeed", 0.0, 3.14 * 4, 0.01);\n  gui.add(prop, "ease", ["cubicOut", "cubicInOut", "liner"]).onChange(() => {\n    let ease = null;\n    switch (prop.ease) {\n      case "cubicOut":\n        ease = tween_esm/* default.Easing */.ZP.Easing.Cubic.Out;\n        break;\n      case "cubicInOut":\n        ease = tween_esm/* default.Easing */.ZP.Easing.Cubic.InOut;\n        break;\n    }\n    animator.updateEase(ease, generator.isLoop);\n  });\n  gui.add(prop, "path", ["heart", "circle", "triangle"]).onChange(() => {\n    let path;\n    switch (prop.path) {\n      case "heart":\n        path = esm/* BezierUtil */.jP.subdivide(getHeartPath());\n        break;\n      case "circle":\n        path = esm/* BezierUtil */.jP.subdivide(getCircle());\n        break;\n      case "triangle":\n        path = getTriangle();\n        break;\n    }\n    generator.path[0].points = path;\n  });\n  gui.add(prop, "isPlay").onChange(() => {\n    if (prop.isPlay) {\n      generator.play();\n    } else {\n      generator.stop();\n    }\n  });\n  const modeManager = generator.modeManager;\n  gui.add(modeManager, "mode", ["sequential", "loop"]);\n  gui.add(prop, "valve").onChange(() => {\n    const valve = generator.valve;\n    if (prop.valve) {\n      valve.open();\n    } else {\n      valve.close();\n    }\n  });\n  gui.add(prop, "visiblePassage").onChange(() => {\n    const ways = generator.multipleWays.ways;\n    if (prop.visiblePassage) {\n      ways[0].showPassage();\n    } else {\n      ways[0].hidePassage();\n    }\n  });\n  gui.add(prop, "clear");\n};\n\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nif (document.readyState !== "loading") {\n  onDomContentsLoaded();\n} else {\n  document.addEventListener("DOMContentLoaded", onDomContentsLoaded);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YSxJQUFJLENBQUMsQ0FBQztJQUNkLENBQUMsTUFBTTtNQUNMYixLQUFLLENBQUNjLEtBQUssQ0FBQyxDQUFDO0lBQ2Y7RUFDRixDQUFDLENBQUM7RUFDRlQsR0FBRyxDQUFDQyxHQUFHLENBQUNSLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDUyxRQUFRLENBQUMsTUFBTTtJQUM3QyxNQUFNUSxJQUFJLEdBQUcvQixTQUFTLENBQUNnQyxZQUFZLENBQUNELElBQUk7SUFDeEMsSUFBSWpCLElBQUksQ0FBQ0ksY0FBYyxFQUFFO01BQ3ZCYSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMxRCxXQUFXLENBQUMsQ0FBQztJQUN2QixDQUFDLE1BQU07TUFDTDBELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ3pELFdBQVcsQ0FBQyxDQUFDO0lBQ3ZCO0VBQ0YsQ0FBQyxDQUFDO0VBQ0YrQyxHQUFHLENBQUNDLEdBQUcsQ0FBQ1IsSUFBSSxFQUFFLE9BQU8sQ0FBQztBQUN4QixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLElBQUluQixRQUFRLENBQUNzQyxVQUFVLEtBQUssU0FBUyxFQUFFO0VBQ3JDekMsbUJBQW1CLENBQUMsQ0FBQztBQUN2QixDQUFDLE1BQU07RUFDTEcsUUFBUSxDQUFDdUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUxQyxtQkFBbUIsQ0FBQztBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vZXNtL1BpeGlQYXJ0aWNsZS5qcz8yYWU5Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vZXNtL1BpeGlQYXJ0aWNsZUdlbmVyYXRvci5qcz9jZjdkIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vZXNtL1BpeGlQYXJ0aWNsZVdheS5qcz8zZmYzIiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vcGl4aWpzLXBhcnRpY2xlLXdheXBvaW50Ly4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtcGFydGljbGUtd2F5cG9pbnQvLi9kZW1vU3JjL1NhbXBsZVBhdGguanM/OTk4OCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3BpeGlqcy1wYXJ0aWNsZS13YXlwb2ludC8uL2RlbW9TcmMvY29tbW9uLmpzPzQwNmYiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9waXhpanMtcGFydGljbGUtd2F5cG9pbnQvLi9kZW1vU3JjL2RlbW9fUGFydGljbGVHZW5lcmF0b3IuanM/ODJlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJ0aWNsZSB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3BhcnRpY2xlLXdheXBvaW50XCI7XG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tIFwicGl4aS5qc1wiO1xuZXhwb3J0IGNsYXNzIFBpeGlQYXJ0aWNsZSBleHRlbmRzIFBhcnRpY2xlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5yID0gMC4wO1xuICAgICAgICAvL+WqkuS7i+WkieaVsHTjgavlv5zjgZjjgZ/lm57ou6Lph49cbiAgICAgICAgdGhpcy5yb3RhdGlvblNwZWVkU2luID0gMC4wO1xuICAgICAgICB0aGlzLnJvdGF0aW9uU3BlZWRDb3MgPSAwLjA7XG4gICAgICAgIC8v5Yid5pyf5Zue6Lui6YePXG4gICAgICAgIHRoaXMucm90YXRpb25TaW4gPSAwLjA7XG4gICAgICAgIHRoaXMucm90YXRpb25Db3MgPSAwLjA7XG4gICAgfVxuICAgIGdldCBiaXRtYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaXRtYXA7XG4gICAgfVxuICAgIGluaXQocGFyZW50LCBiaXRtYXBVUkwsIHJhbmdlUiwgcmFuZ2VSb3RhdGlvblNwZWVkLCBibGVuZE1vZGUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuX2JpdG1hcCA9IFNwcml0ZS5mcm9tKGJpdG1hcFVSTCk7XG4gICAgICAgIHRoaXMuX2JpdG1hcC5hbmNob3Iuc2V0KDAuNSwgMC41KTtcbiAgICAgICAgdGhpcy5fYml0bWFwLmJsZW5kTW9kZSA9IGJsZW5kTW9kZTtcbiAgICAgICAgdGhpcy5wYXJlbnQuYWRkQ2hpbGQodGhpcy5fYml0bWFwKTtcbiAgICAgICAgdGhpcy5yID0gcmFuZ2VSICogTWF0aC5yYW5kb20oKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvblNwZWVkU2luID0gcmFuZ2VSb3RhdGlvblNwZWVkICogKE1hdGgucmFuZG9tKCkgKiAyIC0gMSk7XG4gICAgICAgIHRoaXMucm90YXRpb25TcGVlZENvcyA9IHJhbmdlUm90YXRpb25TcGVlZCAqIChNYXRoLnJhbmRvbSgpICogMiAtIDEpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uU2luID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgICAgICB0aGlzLnJvdGF0aW9uQ29zID0gTWF0aC5yYW5kb20oKSAqIDIgKiBNYXRoLlBJO1xuICAgIH1cbiAgICB1cGRhdGUodCkge1xuICAgICAgICBjb25zdCBuID0gc3VwZXIudXBkYXRlKHQpO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLnBhdGguZ2V0UG9pbnQobik7XG4gICAgICAgIHRoaXMuX2JpdG1hcC54ID0gcG9zWzBdO1xuICAgICAgICB0aGlzLl9iaXRtYXAueSA9IHBvc1sxXTtcbiAgICAgICAgaWYgKHRoaXMuciA+IDAuMCkge1xuICAgICAgICAgICAgY29uc3Qgc2luID0gdGhpcy5yb3RhdGlvblNwZWVkU2luICogdCArIHRoaXMucm90YXRpb25TaW47XG4gICAgICAgICAgICBjb25zdCBjb3MgPSB0aGlzLnJvdGF0aW9uU3BlZWRDb3MgKiB0ICsgdGhpcy5yb3RhdGlvbkNvcztcbiAgICAgICAgICAgIHRoaXMuX2JpdG1hcC54ICs9IE1hdGguY29zKGNvcykgKiB0aGlzLnI7XG4gICAgICAgICAgICB0aGlzLl9iaXRtYXAueSArPSBNYXRoLnNpbihzaW4pICogdGhpcy5yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLl9iaXRtYXAucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9iaXRtYXAucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuX2JpdG1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9iaXRtYXAgPSBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhcnRpY2xlR2VuZXJhdG9yLCB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3BhcnRpY2xlLXdheXBvaW50XCI7XG5pbXBvcnQgeyBBc3NldHMgfSBmcm9tIFwicGl4aS5qc1wiO1xuaW1wb3J0IHsgUGl4aVBhcnRpY2xlIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmV4cG9ydCBjbGFzcyBQaXhpUGFydGljbGVHZW5lcmF0b3IgZXh0ZW5kcyBQYXJ0aWNsZUdlbmVyYXRvciB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBwYXRoLCBtYXAsIG9wdGlvbikge1xuICAgICAgICBzdXBlcihwYXRoLCBvcHRpb24pO1xuICAgICAgICB0aGlzLm1hcENvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5fcmFuZ2VSID0gb3B0aW9uPy5yYW5nZVIgPz8gMDtcbiAgICAgICAgdGhpcy5fcmFuZ2VSb3RhdGlvblNwZWVkID0gb3B0aW9uPy5yYW5nZVJvdGF0aW9uU3BlZWQgPz8gMDtcbiAgICAgICAgdGhpcy5fYmxlbmRNb2RlID0gb3B0aW9uPy5ibGVuZE1vZGUgPz8gXCJub3JtYWxcIjtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWFwKSkge1xuICAgICAgICAgICAgaWYgKG1hcC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQaXhpUGFydGljbGVHZW5lcmF0b3IgOiDjgqrjg5fjgrfjg6fjg7PjgajjgZfjgabmuKHjgZXjgozjgZ/jg4bjgq/jgrnjg4Hjg6PphY3liJfjgYznqbrjgafjgZnjgILjgZPjga7jgq/jg6njgrnjga/li5XkvZzjgZfjgb7jgZnjgYzjgIHkuIDliIfjga7ooajnpLrjgpLooYzjgYTjgb7jgZvjgpPjgIJcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcCA9IFttYXBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGluaXRBc3NldHMoKSB7XG4gICAgICAgIGF3YWl0IEFzc2V0cy5sb2FkKHRoaXMubWFwKTtcbiAgICB9XG4gICAgZ2VuZXJhdGVQYXJ0aWNsZShwYXRoKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gbmV3IFBpeGlQYXJ0aWNsZShwYXRoKTtcbiAgICAgICAgcGFydGljbGUuaW5pdCh0aGlzLnBhcmVudCwgdGhpcy5tYXBbdGhpcy5tYXBDb3VudGVyXSwgdGhpcy5fcmFuZ2VSLCB0aGlzLl9yYW5nZVJvdGF0aW9uU3BlZWQsIHRoaXMuX2JsZW5kTW9kZSk7XG4gICAgICAgIHRoaXMubWFwQ291bnRlciA9ICh0aGlzLm1hcENvdW50ZXIgKz0gMSkgJSB0aGlzLm1hcC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBwYXJ0aWNsZTtcbiAgICB9XG4gICAgZ2VuZXJhdGVBbGwoKSB7XG4gICAgICAgIHRoaXMubWFwQ291bnRlciA9IDA7XG4gICAgICAgIHN1cGVyLmdlbmVyYXRlQWxsKCk7XG4gICAgfVxuICAgIGdldCByYW5nZVJvdGF0aW9uU3BlZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYW5nZVJvdGF0aW9uU3BlZWQ7XG4gICAgfVxuICAgIHNldCByYW5nZVJvdGF0aW9uU3BlZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcmFuZ2VSb3RhdGlvblNwZWVkID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByYW5nZVIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYW5nZVI7XG4gICAgfVxuICAgIHNldCByYW5nZVIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fcmFuZ2VSID0gdmFsdWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGFydGljbGVXYXkgfSBmcm9tIFwiQG1hc2F0b21ha2luby9wYXJ0aWNsZS13YXlwb2ludFwiO1xuaW1wb3J0IHsgR3JhcGhpY3MgfSBmcm9tIFwicGl4aS5qc1wiO1xuZXhwb3J0IGNsYXNzIFBpeGlQYXJ0aWNsZVdheSBleHRlbmRzIFBhcnRpY2xlV2F5IHtcbiAgICBjb25zdHJ1Y3Rvcihwb2ludHMsIG9wdGlvbikge1xuICAgICAgICBzdXBlcihwb2ludHMpO1xuICAgICAgICB0aGlzLnBhc3NhZ2VDb2xvciA9IDB4ZmYwMDAwO1xuICAgICAgICB0aGlzLnBhc3NhZ2VBbHBoYSA9IDAuMjU7XG4gICAgICAgIGlmICghb3B0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnBhc3NhZ2VDb2xvciA9IG9wdGlvbj8ucGFzc2FnZUNvbG9yID8/IHRoaXMucGFzc2FnZUNvbG9yO1xuICAgICAgICB0aGlzLnBhc3NhZ2VBbHBoYSA9IG9wdGlvbj8ucGFzc2FnZUFscGhhID8/IHRoaXMucGFzc2FnZUFscGhhO1xuICAgICAgICBpZiAob3B0aW9uPy5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFBhc3NhZ2Uob3B0aW9uLnBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdFBhc3NhZ2UocGFyZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnBhc3NhZ2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucGFzc2FnZSA9IG5ldyBHcmFwaGljcygpO1xuICAgICAgICB0aGlzLnBhc3NhZ2UudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBwYXJlbnQuYWRkQ2hpbGQodGhpcy5wYXNzYWdlKTtcbiAgICAgICAgdGhpcy5kcmF3UGFzc2FnZSgpO1xuICAgIH1cbiAgICBkcmF3UGFzc2FnZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBhc3NhZ2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5wb2ludHMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnBvaW50cy5sZW5ndGggPD0gMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgaXNCZXppZXIgPSB0aGlzLnBvaW50c1sxXS5sZW5ndGggPT09IDY7XG4gICAgICAgIGNvbnN0IGcgPSB0aGlzLnBhc3NhZ2U7XG4gICAgICAgIGcuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaCgocCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGcubW92ZVRvKHBbMF0sIHBbMV0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNCZXppZXIpIHtcbiAgICAgICAgICAgICAgICBnLmxpbmVUbyhwWzBdLCBwWzFdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnLmJlemllckN1cnZlVG8ocFswXSwgcFsxXSwgcFsyXSwgcFszXSwgcFs0XSwgcFs1XSk7XG4gICAgICAgIH0pO1xuICAgICAgICBnLnN0cm9rZSh7IHdpZHRoOiAxLCBjb2xvcjogdGhpcy5wYXNzYWdlQ29sb3IsIGFscGhhOiB0aGlzLnBhc3NhZ2VBbHBoYSB9KTtcbiAgICB9XG4gICAgb25TZXRQb2ludHMoKSB7XG4gICAgICAgIHN1cGVyLm9uU2V0UG9pbnRzKCk7XG4gICAgICAgIHRoaXMuZHJhd1Bhc3NhZ2UoKTtcbiAgICB9XG4gICAgc2hvd1Bhc3NhZ2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXNzYWdlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnBhc3NhZ2UudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGhpZGVQYXNzYWdlKCkge1xuICAgICAgICBpZiAoIXRoaXMucGFzc2FnZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5wYXNzYWdlLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9QaXhpUGFydGljbGUuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1BpeGlQYXJ0aWNsZUdlbmVyYXRvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUGl4aVBhcnRpY2xlV2F5LmpzXCI7XG4iLCJleHBvcnQgY29uc3QgZ2V0SGVhcnRQYXRoID0gKCkgPT4ge1xuICByZXR1cm4gW1xuICAgIFsxOTkuOTk5NjkyNTU4Mjk2LCAxMzkuMDM3ODA5ODYxMzI2XSxcbiAgICBbXG4gICAgICAxOTkuOTk5NjkyNTU4Mjk2LCAxMzkuMDM3ODA5ODYxMzI2LCAyMTYuNTE3NTAxMzQyMDUyLCA5MS4wNzAzNTUyMzQ5NzE0LFxuICAgICAgMjYwLjQwODg2NDczOTgxMywgMTAxLjQ3ODA0ODI1MTQ0OSxcbiAgICBdLFxuICAgIFtcbiAgICAgIDMwNC4zMDY1NjkwNTgwNjksIDExMS44ODc0MzUyMjgzNzYsIDMwMi4wNDA0NzM0NjM1MzgsIDE0OS44OTgxNjg3ODI0ODYsXG4gICAgICAyOTcuOTY5MDUwNzg4NjU1LCAxNjcuMDg5Nzk0OTQ0Nzk4LFxuICAgIF0sXG4gICAgW1xuICAgICAgMjkzLjg5MTI1MzIxOTU1NywgMTg0LjMxNDgzMTc5OTk1MiwgMjY2LjI5MTk4OTUzNzg4NCwgMjEzLjI0NzY3NjMxODQxNCxcbiAgICAgIDI0MS40MDU1OTI0MjAyMTUsIDIyOS41MzgwNzA0OTQyMjYsXG4gICAgXSxcbiAgICBbXG4gICAgICAyMTYuNTE3NTAxMzQyMDUyLCAyNDUuODI4NDY0NjcwMDQxLCAyMDEuMzYwMzY2MzI1NjU4LCAyNjMuNDc1Mjk3Njc3NzE2LFxuICAgICAgMTk5Ljk5OTY5MjU1ODI5NiwgMjY5LjM2MDExNjI4NzYxOCxcbiAgICBdLFxuICAgIFtcbiAgICAgIDE5OC42NDQ5NDc2NTI2NjUsIDI2My40NzUyOTc2Nzc3MTYsIDE4My40ODE4ODM3NzQ1MzgsIDI0NS44Mjg0NjQ2NzAwNDEsXG4gICAgICAxNTguNTk1NDg2NjU2ODczLCAyMjkuNTM4MDcwNDk0MjI2LFxuICAgIF0sXG4gICAgW1xuICAgICAgMTMzLjcwNzM5NTU3ODcxLCAyMTMuMjQ3Njc2MzE4NDE0LCAxMDYuMTExOTMyMTM5OTAzLCAxODQuMzE0ODMxNzk5OTUyLFxuICAgICAgMTAyLjAzMDMzNDMyNzkzOCwgMTY3LjA4OTc5NDk0NDc5OCxcbiAgICBdLFxuICAgIFtcbiAgICAgIDk3Ljk1ODkwMDI3ODk0NTMsIDE0OS44OTgxNjg3ODI0ODYsIDk1LjY5NjYxNjAzODI4MTcsIDExMS44ODc0MzUyMjgzNzYsXG4gICAgICAxMzkuNTkyMjE0MzM3Mjc1LCAxMDEuNDc4MDQ4MjUxNDQ5LFxuICAgIF0sXG4gICAgW1xuICAgICAgMTgzLjQ4MTg4Mzc3NDUzOCwgOTEuMDcwMzU1MjM0OTcxNCwgMTk5Ljk5OTY5MjU1ODI5NiwgMTM5LjAzNzgwOTg2MTMyNixcbiAgICAgIDE5OS45OTk2OTI1NTgyOTYsIDEzOS4wMzc4MDk4NjEzMjYsXG4gICAgXSxcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDaXJjbGUgPSAoKSA9PiB7XG4gIGNvbnN0IFggPSAyMDA7XG4gIGNvbnN0IFkgPSAyMDA7XG5cbiAgY29uc3QgSyA9ICg0ICogKE1hdGguc3FydCgyKSAtIDEpKSAvIDM7XG4gIGNvbnN0IFIgPSAxMDA7XG4gIGNvbnN0IFJLID0gUiAqIEs7XG4gIHJldHVybiBbXG4gICAgW1IgKyBYLCAwICsgWV0sXG4gICAgW1IgKyBYLCBSSyArIFksIFJLICsgWCwgUiArIFksIDAgKyBYLCBSICsgWV0sXG4gICAgWy1SSyArIFgsIFIgKyBZLCAtUiArIFgsIFJLICsgWSwgLVIgKyBYLCAwICsgWV0sXG4gICAgWy1SICsgWCwgLVJLICsgWSwgLVJLICsgWCwgLVIgKyBZLCAwICsgWCwgLVIgKyBZXSxcbiAgICBbUksgKyBYLCAtUiArIFksIFIgKyBYLCAtUksgKyBZLCBSICsgWCwgMCArIFldLFxuICBdO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRyaWFuZ2xlID0gKCkgPT4ge1xuICByZXR1cm4gW1xuICAgIFsyMDAsIDEwMF0sXG4gICAgWzMwMCwgMjczLjIwNTA4MDc1Njg4N10sXG4gICAgWzEwMCwgMjczLjIwNTA4MDc1Njg4N10sXG4gICAgWzIwMCwgMTAwXSxcbiAgXTtcbn07XG4iLCJpbXBvcnQgeyBnZXRIZWFydFBhdGggfSBmcm9tIFwiLi9TYW1wbGVQYXRoLmpzXCI7XG5pbXBvcnQgeyBQYXJ0aWNsZVdheSwgQmV6aWVyVXRpbCB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3BhcnRpY2xlLXdheXBvaW50XCI7XG5pbXBvcnQgeyBQaXhpUGFydGljbGVXYXkgfSBmcm9tIFwiLi4vZXNtL2luZGV4LmpzXCI7XG5cbi8qKlxuICogUGFydGljbGVXYXnjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAqIEByZXR1cm4ge1BhcnRpY2xlV2F5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFdheShzdGFnZSkge1xuICBjb25zdCBwb2ludHMgPSBnZXRIZWFydFBhdGgoKTtcbiAgY29uc3Qgd2F5UG9pbnQgPSBuZXcgUGl4aVBhcnRpY2xlV2F5KEJlemllclV0aWwuc3ViZGl2aWRlKHBvaW50cyksIHtcbiAgICBwYXJlbnQ6IHN0YWdlLFxuICB9KTtcbiAgcmV0dXJuIHdheVBvaW50O1xufVxuIiwiaW1wb3J0IHsgQmV6aWVyVXRpbCB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3BhcnRpY2xlLXdheXBvaW50XCI7XG5pbXBvcnQgeyBQaXhpUGFydGljbGVHZW5lcmF0b3IgfSBmcm9tIFwiLi4vZXNtL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRDaXJjbGUsIGdldEhlYXJ0UGF0aCwgZ2V0VHJpYW5nbGUgfSBmcm9tIFwiLi9TYW1wbGVQYXRoLmpzXCI7XG5pbXBvcnQgeyBpbml0V2F5IH0gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgR1VJIGZyb20gXCJsaWwtZ3VpXCI7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiB9IGZyb20gXCJwaXhpLmpzXCI7XG5pbXBvcnQgVFdFRU4gZnJvbSBcIkB0d2VlbmpzL3R3ZWVuLmpzXCI7XG5cbi8qKlxuICogRE9NQ29udGVudExvYWRlZOW+jOOBruWIneacn+WMluWHpueQhuOAglxuICog44OH44Oi44Gr5b+F6KaB44Gq44OR44O844OE44KS5LiA5byP5Yid5pyf5YyW44GZ44KL44CCXG4gKi9cbmNvbnN0IG9uRG9tQ29udGVudHNMb2FkZWQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGFwcCA9IG5ldyBBcHBsaWNhdGlvbigpO1xuICBhd2FpdCBhcHAuaW5pdCh7IHdpZHRoOiA2NDAsIGhlaWdodDogNDgwIH0pO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFwcC5jYW52YXMpO1xuXG4gIGNvbnN0IHdheSA9IGluaXRXYXkoYXBwLnN0YWdlKTtcbiAgY29uc3QgZ2VuZXJhdG9yID0gaW5pdEdlbmVyYXRvcih3YXksIGFwcC5zdGFnZSk7XG4gIGF3YWl0IGdlbmVyYXRvci5pbml0QXNzZXRzKCk7XG4gIGdlbmVyYXRvci5wbGF5KCk7XG4gIGluaXRHVUkoZ2VuZXJhdG9yKTtcbn07XG5cbi8qKlxuICog44OR44O844OG44Kj44Kv44Or55Sf5oiQ5qmf44KS5Yid5pyf5YyW44GZ44KL44CCXG4gKiBAcGFyYW0gd2F5XG4gKiBAcGFyYW0gc3RhZ2VcbiAqIEByZXR1cm4ge1BpeGlQYXJ0aWNsZUdlbmVyYXRvcn1cbiAqL1xuY29uc3QgaW5pdEdlbmVyYXRvciA9ICh3YXksIHN0YWdlKSA9PiB7XG4gIGNvbnN0IGJpdG1hcCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICBiaXRtYXAucHVzaChgLi9jaXJjbGUkeyhpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9LnBuZ2ApO1xuICB9XG5cbiAgY29uc3QgZ2VuZXJhdG9yID0gbmV3IFBpeGlQYXJ0aWNsZUdlbmVyYXRvcihzdGFnZSwgd2F5LCBiaXRtYXAsIHtcbiAgICBlYXNlOiBUV0VFTi5FYXNpbmcuQ3ViaWMuSW5PdXQsXG4gICAgYmxlbmRNb2RlOiBcImFkZFwiLFxuICB9KTtcbiAgZ2VuZXJhdG9yLmFuaW1hdG9yLnNldFNwZWVkKDE2NiwgOCAqIDYpO1xuICByZXR1cm4gZ2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiDjg4fjg6Ljga7jg5Hjg6njg6Hjg7zjgr/jg7zjgpLmk43kvZzjgZnjgotHVUnjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAqIEBwYXJhbSBnZW5lcmF0b3JcbiAqL1xuY29uc3QgaW5pdEdVSSA9IChnZW5lcmF0b3IpID0+IHtcbiAgY29uc3QgcHJvcCA9IHtcbiAgICBpc1BsYXk6IHRydWUsXG4gICAgcGF0aDogXCJoZWFydFwiLFxuICAgIGVhc2U6IFwiY3ViaWNJbk91dFwiLFxuICAgIHZhbHZlOiB0cnVlLFxuICAgIG1vZGU6IFwic2VxdWVudGlhbFwiLFxuICAgIHZpc2libGVQYXNzYWdlOiBmYWxzZSxcbiAgICBjbGVhcjogKCkgPT4ge1xuICAgICAgZ2VuZXJhdG9yLnBhcnRpY2xlQ29udGFpbmVyLnJlbW92ZUFsbCgpO1xuICAgIH0sXG4gIH07XG4gIGNvbnN0IGd1aSA9IG5ldyBHVUkoKTtcbiAgY29uc3QgYW5pbWF0b3IgPSBnZW5lcmF0b3IuYW5pbWF0b3I7XG4gIGd1aS5hZGQoYW5pbWF0b3IsIFwiZ2VuZXJhdGlvbkludGVydmFsXCIsIDEsIDEwMDApO1xuICBndWkuYWRkKGFuaW1hdG9yLCBcInNwZWVkUGVyU2VjXCIsIDAuMDAwMSwgMC41KTtcblxuICBndWkuYWRkKGdlbmVyYXRvciwgXCJyYW5nZVJcIiwgMC4wLCAzMi4wLCAwLjEpO1xuICBndWkuYWRkKGdlbmVyYXRvciwgXCJyYW5nZVJvdGF0aW9uU3BlZWRcIiwgMC4wLCAzLjE0ICogNCwgMC4wMSk7XG5cbiAgZ3VpLmFkZChwcm9wLCBcImVhc2VcIiwgW1wiY3ViaWNPdXRcIiwgXCJjdWJpY0luT3V0XCIsIFwibGluZXJcIl0pLm9uQ2hhbmdlKCgpID0+IHtcbiAgICBsZXQgZWFzZSA9IG51bGw7XG4gICAgc3dpdGNoIChwcm9wLmVhc2UpIHtcbiAgICAgIGNhc2UgXCJjdWJpY091dFwiOlxuICAgICAgICBlYXNlID0gVFdFRU4uRWFzaW5nLkN1YmljLk91dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY3ViaWNJbk91dFwiOlxuICAgICAgICBlYXNlID0gVFdFRU4uRWFzaW5nLkN1YmljLkluT3V0O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgYW5pbWF0b3IudXBkYXRlRWFzZShlYXNlLCBnZW5lcmF0b3IuaXNMb29wKTtcbiAgfSk7XG4gIGd1aS5hZGQocHJvcCwgXCJwYXRoXCIsIFtcImhlYXJ0XCIsIFwiY2lyY2xlXCIsIFwidHJpYW5nbGVcIl0pLm9uQ2hhbmdlKCgpID0+IHtcbiAgICBsZXQgcGF0aDtcbiAgICBzd2l0Y2ggKHByb3AucGF0aCkge1xuICAgICAgY2FzZSBcImhlYXJ0XCI6XG4gICAgICAgIHBhdGggPSBCZXppZXJVdGlsLnN1YmRpdmlkZShnZXRIZWFydFBhdGgoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNpcmNsZVwiOlxuICAgICAgICBwYXRoID0gQmV6aWVyVXRpbC5zdWJkaXZpZGUoZ2V0Q2lyY2xlKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ0cmlhbmdsZVwiOlxuICAgICAgICBwYXRoID0gZ2V0VHJpYW5nbGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGdlbmVyYXRvci5wYXRoWzBdLnBvaW50cyA9IHBhdGg7XG4gIH0pO1xuICBndWkuYWRkKHByb3AsIFwiaXNQbGF5XCIpLm9uQ2hhbmdlKCgpID0+IHtcbiAgICBpZiAocHJvcC5pc1BsYXkpIHtcbiAgICAgIGdlbmVyYXRvci5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbmVyYXRvci5zdG9wKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbW9kZU1hbmFnZXIgPSBnZW5lcmF0b3IubW9kZU1hbmFnZXI7XG4gIGd1aS5hZGQobW9kZU1hbmFnZXIsIFwibW9kZVwiLCBbXCJzZXF1ZW50aWFsXCIsIFwibG9vcFwiXSk7XG4gIGd1aS5hZGQocHJvcCwgXCJ2YWx2ZVwiKS5vbkNoYW5nZSgoKSA9PiB7XG4gICAgY29uc3QgdmFsdmUgPSBnZW5lcmF0b3IudmFsdmU7XG4gICAgaWYgKHByb3AudmFsdmUpIHtcbiAgICAgIHZhbHZlLm9wZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdmUuY2xvc2UoKTtcbiAgICB9XG4gIH0pO1xuICBndWkuYWRkKHByb3AsIFwidmlzaWJsZVBhc3NhZ2VcIikub25DaGFuZ2UoKCkgPT4ge1xuICAgIGNvbnN0IHdheXMgPSBnZW5lcmF0b3IubXVsdGlwbGVXYXlzLndheXM7XG4gICAgaWYgKHByb3AudmlzaWJsZVBhc3NhZ2UpIHtcbiAgICAgIHdheXNbMF0uc2hvd1Bhc3NhZ2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2F5c1swXS5oaWRlUGFzc2FnZSgpO1xuICAgIH1cbiAgfSk7XG4gIGd1aS5hZGQocHJvcCwgXCJjbGVhclwiKTtcbn07XG5cbi8qKlxuICogRE9NQ29udGVudExvYWRlZOS7pemZjeOBq+WIneacn+WMluWHpueQhuOCkuWun+ihjOOBmeOCi1xuICovXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIpIHtcbiAgb25Eb21Db250ZW50c0xvYWRlZCgpO1xufSBlbHNlIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgb25Eb21Db250ZW50c0xvYWRlZCk7XG59XG4iXSwibmFtZXMiOlsiUGFydGljbGUiLCJTcHJpdGUiLCJQaXhpUGFydGljbGUiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInIiLCJyb3RhdGlvblNwZWVkU2luIiwicm90YXRpb25TcGVlZENvcyIsInJvdGF0aW9uU2luIiwicm90YXRpb25Db3MiLCJiaXRtYXAiLCJfYml0bWFwIiwiaW5pdCIsInBhcmVudCIsImJpdG1hcFVSTCIsInJhbmdlUiIsInJhbmdlUm90YXRpb25TcGVlZCIsImJsZW5kTW9kZSIsImZyb20iLCJhbmNob3IiLCJzZXQiLCJhZGRDaGlsZCIsIk1hdGgiLCJyYW5kb20iLCJQSSIsInVwZGF0ZSIsInQiLCJuIiwicG9zIiwicGF0aCIsImdldFBvaW50IiwieCIsInkiLCJzaW4iLCJjb3MiLCJkaXNwb3NlIiwicmVtb3ZlQ2hpbGQiLCJQYXJ0aWNsZUdlbmVyYXRvciIsIkFzc2V0cyIsIlBpeGlQYXJ0aWNsZUdlbmVyYXRvciIsIm1hcCIsIm9wdGlvbiIsIm1hcENvdW50ZXIiLCJfcmFuZ2VSIiwiX3JhbmdlUm90YXRpb25TcGVlZCIsIl9ibGVuZE1vZGUiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJjb25zb2xlIiwid2FybiIsInRyYWNlIiwiaW5pdEFzc2V0cyIsImxvYWQiLCJnZW5lcmF0ZVBhcnRpY2xlIiwicGFydGljbGUiLCJnZW5lcmF0ZUFsbCIsInZhbHVlIiwiUGFydGljbGVXYXkiLCJHcmFwaGljcyIsIlBpeGlQYXJ0aWNsZVdheSIsInBvaW50cyIsInBhc3NhZ2VDb2xvciIsInBhc3NhZ2VBbHBoYSIsImluaXRQYXNzYWdlIiwicGFzc2FnZSIsInZpc2libGUiLCJkcmF3UGFzc2FnZSIsImlzQmV6aWVyIiwiZyIsImNsZWFyIiwiZm9yRWFjaCIsInAiLCJpbmRleCIsIm1vdmVUbyIsImxpbmVUbyIsImJlemllckN1cnZlVG8iLCJzdHJva2UiLCJ3aWR0aCIsImNvbG9yIiwiYWxwaGEiLCJvblNldFBvaW50cyIsInNob3dQYXNzYWdlIiwiaGlkZVBhc3NhZ2UiLCJnZXRIZWFydFBhdGgiLCJnZXRDaXJjbGUiLCJYIiwiWSIsIksiLCJzcXJ0IiwiUiIsIlJLIiwiZ2V0VHJpYW5nbGUiLCJCZXppZXJVdGlsIiwiaW5pdFdheSIsInN0YWdlIiwid2F5UG9pbnQiLCJzdWJkaXZpZGUiLCJHVUkiLCJBcHBsaWNhdGlvbiIsIlRXRUVOIiwib25Eb21Db250ZW50c0xvYWRlZCIsImFwcCIsImhlaWdodCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2FudmFzIiwid2F5IiwiZ2VuZXJhdG9yIiwiaW5pdEdlbmVyYXRvciIsInBsYXkiLCJpbml0R1VJIiwiaSIsInB1c2giLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiZWFzZSIsIkVhc2luZyIsIkN1YmljIiwiSW5PdXQiLCJhbmltYXRvciIsInNldFNwZWVkIiwicHJvcCIsImlzUGxheSIsInZhbHZlIiwibW9kZSIsInZpc2libGVQYXNzYWdlIiwicGFydGljbGVDb250YWluZXIiLCJyZW1vdmVBbGwiLCJndWkiLCJhZGQiLCJvbkNoYW5nZSIsIk91dCIsInVwZGF0ZUVhc2UiLCJpc0xvb3AiLCJzdG9wIiwibW9kZU1hbmFnZXIiLCJvcGVuIiwiY2xvc2UiLCJ3YXlzIiwibXVsdGlwbGVXYXlzIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6333\n')}},__webpack_module_cache__={},deferred,inProgress,dataWebpackPrefix;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(n=0;n<deferred.length;n++){for(var[U,F,B]=deferred[n],I=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(n--,1);var i=F();void 0!==i&&(Q=i)}}return Q}B=B||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>B;n--)deferred[n]=deferred[n-1];deferred[n]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.f={},__webpack_require__.e=Q=>Promise.all(Object.keys(__webpack_require__.f).reduce(((U,F)=>(__webpack_require__.f[F](Q,U),U)),[])),__webpack_require__.u=Q=>Q+".js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),inProgress={},dataWebpackPrefix="@masatomakino/pixijs-particle-waypoint:",__webpack_require__.l=(Q,U,F,B)=>{if(inProgress[Q])inProgress[Q].push(U);else{var s,I;if(void 0!==F)for(var g=document.getElementsByTagName("script"),i=0;i<g.length;i++){var n=g[i];if(n.getAttribute("src")==Q||n.getAttribute("data-webpack")==dataWebpackPrefix+F){s=n;break}}s||(I=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,__webpack_require__.nc&&s.setAttribute("nonce",__webpack_require__.nc),s.setAttribute("data-webpack",dataWebpackPrefix+F),s.src=Q),inProgress[Q]=[U];var C=(U,F)=>{s.onerror=s.onload=null,clearTimeout(e);var B=inProgress[Q];if(delete inProgress[Q],s.parentNode&&s.parentNode.removeChild(s),B&&B.forEach((Q=>Q(F))),U)return U(F)},e=setTimeout(C.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=C.bind(null,s.onerror),s.onload=C.bind(null,s.onload),I&&document.head.appendChild(s)}},__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.j=365,(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var U=__webpack_require__.g.document;if(!Q&&U&&(U.currentScript&&(Q=U.currentScript.src),!Q)){var F=U.getElementsByTagName("script");if(F.length)for(var B=F.length-1;B>-1&&!Q;)Q=F[B--].src}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),(()=>{var Q={365:0};__webpack_require__.f.j=(U,F)=>{var B=__webpack_require__.o(Q,U)?Q[U]:void 0;if(0!==B)if(B)F.push(B[2]);else{var s=new Promise(((F,s)=>B=Q[U]=[F,s]));F.push(B[2]=s);var I=__webpack_require__.p+__webpack_require__.u(U),g=new Error;__webpack_require__.l(I,(F=>{if(__webpack_require__.o(Q,U)&&(0!==(B=Q[U])&&(Q[U]=void 0),B)){var s=F&&("load"===F.type?"missing":F.type),I=F&&F.target&&F.target.src;g.message="Loading chunk "+U+" failed.\n("+s+": "+I+")",g.name="ChunkLoadError",g.type=s,g.request=I,B[1](g)}}),"chunk-"+U,U)}},__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,g,i]=F,n=0;if(I.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(i)var C=i(__webpack_require__)}for(U&&U(F);n<I.length;n++)s=I[n],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(C)},F=self.webpackChunk_masatomakino_pixijs_particle_waypoint=self.webpackChunk_masatomakino_pixijs_particle_waypoint||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(6333)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();